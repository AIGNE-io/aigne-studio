import flat from 'flat';

export default flat({
  name: 'Name',
  add: 'Add',
  project: 'Project',
  branch: 'Branch',
  form: 'Form',
  chat: 'Chat',
  tag: 'Tag',
  rename: 'Rename',
  actions: 'Actions',
  title: 'Title',
  placeholder: 'Placeholder',
  label: 'Label',
  value: 'Value',
  defaultValue: 'Default Value',
  helperText: 'Helper Text',
  required: 'Required',
  minLength: 'Min Length',
  maxLength: 'Max Length',
  min: 'Min',
  max: 'Max',
  addObject: 'Add {object}',
  option: 'Option',
  number: 'Number',
  select: 'Select',
  language: 'Language',
  multiline: 'Multiline',
  alert: {
    export: 'Export',
    import: 'Import',
    imported: 'Imported',
    saveChanges: 'Your updated data has not been saved, are you sure to leave?',
    discard: 'Discard',
    discardChanges: 'Discard all changes?',
    deleteTemplate: 'Delete template "{template}"?',
    deleteTemplateContent: 'There are {references} templates referencing this template',
    exportTip: 'The following templates will be exported',
    importTip: 'The following templates will be imported',
    deleteTemplates: 'The following templates will be deleted',
    cancel: 'Cancel',
    delete: 'Delete',
    edit: 'Edit',
    ok: 'Ok',
    saved: 'Saved',
    savedButSyncConflicted: 'Saved, but sync with remote conflict!',
    deleted: 'Deleted',
    overwrittenTip: 'This template will be overwritten',
    downloadBackup: 'Download backup',
    openInAssistant: 'Open in Assistant',
    duplicate: 'Duplicate',
    copyId: 'Copy Id',
    unnamed: 'Unnamed',
    search: 'Search',
    noCommits: 'No Commits',
    updatedAt: 'Updated At',
    history: 'History',
    branchCreated: 'Branch created',
    onBranchTip: 'You are now in history, you need to create a branch to save your changes!',
    deleteBranch: 'Delete branch "{branch}"?',
    showAllBranches: 'Show all branches',
    close: 'Close',
    pickFromBranch: 'Pick from branch',
    saveInNewBranch: 'Save in new branch',
    newBranchRequired: 'New branch is required',
    currentBranch: 'Current branch',
    message: 'Message',
    compare: 'Version compare',
    unsave: {
      title: 'Unsaved Changes',
      content: ' Your changes have not been saved yet!',
    },
  },
  import: {
    remote: 'Import from git repo',
    remoteDescription: 'Import a project from an existing git repository, such as GitHub.',
    didSpaces: 'Import from DID Spaces',
    didSpacesTitle: 'Import project from DID Spaces',
    fromCurrentDidSpaceImport: 'Import a project from the currently connected DID Space({name})',
    fromOtherDidSpaceImport: 'Import a project from other DID Space',
    selectProject: 'Select Project',
    selectBranch: 'Select Branch',
    selectAgentTip: 'Please select the agent first',
    empty: 'No template projects available for import.',
  },
  emptyToolPlaceholder: 'Add an assistant as a tool to execute, select, and other capabilities.',
  defaultTool: 'Default tool',
  setDefaultTool: 'Set as default tool',
  unsetDefaultTool: 'Unset default tool',
  translate: 'Tool name english translate',
  functionName:
    'The name of the proactive translation assistant can be used as a template for selection. If the function name is not in English, it cannot be recognized. If it is already in English, there is no need for translation.',
  newFromTemplates: 'New from Templates',
  myProjects: 'My Projects',
  examples: 'Examples',
  duplicate: 'Duplicate',
  pin: 'Pin',
  unpin: 'Unpin',
  stopped: 'Stopped has been selected in advance',
  delete: 'Delete',
  open: 'Open',
  unnamed: 'Unnamed',
  description: 'Description',
  blank: 'Blank',
  create: 'Create',
  newObject: 'New {object}',
  newObjectWithType: 'New "{object}" {type}',
  importObject: 'Import {object}',
  createdAt: 'Created at',
  home: 'Home',
  prompts: 'Prompts',
  functions: 'Functions',
  function: 'Function',
  api: 'API',
  noParameters: 'No Parameters',
  logs: 'Logs',
  parameters: 'Parameters',
  model: 'Model',
  images: 'Images',
  inputParameters: 'Input',
  fnArgs: 'Function parameters',
  promptMessages: 'Prompt To AI Input',
  temperature: 'temperature',
  temperatureTip:
    'Adjusting the temperature can control the diversity of generated text. A low temperature will make the generated text more consistent and predictable, while a high temperature will increase the randomness and creativity of the text.',
  topP: 'top_p',
  topPTip:
    "Adjusting top_p can control the length and diversity of the generated text. A lower top_p value narrows down the model's selection range, resulting in more coherent text, while a higher top_p value introduces more choices, increasing the diversity of the text.",
  presencePenalty: 'presence_penalty',
  presencePenaltyTip:
    'Adjusting the presence_penalty can affect the frequency of repeated topics in the generated text. A higher presence_penalty value will reduce the occurrence of repeated topics, resulting in more fresh and diverse content, while a lower presence_penalty value may lead to more repetition of topics.',
  frequencyPenalty: 'frequency_penalty',
  frequencyPenaltyTip:
    'Adjusting the frequency_penalty allows for control over the occurrence of repeated words and phrases in the generated text. A higher frequency_penalty value will reduce the likelihood of repetitions, while a lower frequency_penalty value may increase the repetition of learned phrases and words from previously generated text.',
  maxTokens: 'max_tokens',
  maxTokensTip:
    "The maximum number of tokens to generate in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
  type: 'Type',
  text: 'Text',
  object: 'Object',
  array: 'Array',
  image: 'Image',
  mode: 'Mode',
  formMode: 'Form',
  chatMode: 'Chat',
  clearSession: 'Clear current session history',
  deleteSession: 'Delete current session',
  showSidebar: 'Show sidebar',
  hideSidebar: 'Hide sidebar',
  folder: 'folder',
  agent: 'Agent',
  agents: 'Agents',
  prompt: 'Prompt',
  send: 'Send',
  stop: 'Stop',
  session: 'Session',
  setting: 'Setting',
  debug: 'Debug',
  save: 'Save',
  cancel: 'Cancel',
  commitMessage: 'Note',
  confirm: 'Confirm',
  projectSetting: {
    homePageUrl: 'Home Page Url',
    selectProject: 'Select Project',
    name: 'Project name',
    description: 'Project description',
    gitType: {
      title: 'Git Version',
      simple: {
        title: 'Simple mode',
        subTitle: "Just need simple version control, or don't care about version issues.",
      },
      default: {
        title: 'Professional Mode (familiar with Git)',
        subTitle:
          'Users are familiar with the basic knowledge of Git version management and need perfect version management ability.',
      },
    },
    baseInfo: 'Basic Information',
    defaultModel: 'Default Model',
    icon: 'Select or Upload Icon',
    selectedFail: 'Please select a picture first',
  },
  notOpenFile: 'Please open the file from the file list on the left first!',
  noProjectTip: "You haven't created any projects yet. You can create one from the template above!",
  aboutTokens: 'About {tokens} tokens',
  test: 'Test',
  discuss: 'Discuss',
  variable: 'Variable',
  loading: 'Loading...',
  noData: 'No data',
  dataset: 'Dataset',
  next: 'Next',
  public: 'Public',
  nonPublic: 'Non-public',
  noPermissionSaveToBranch: 'You do not have permission to save data to branch {branch}',
  validation: {
    fieldRequired: 'Please fill out this field',
    fieldMax: 'Please enter a value less than {max}',
    fieldMin: 'Please enter a value greater than {min}',
    fieldMinLength: 'Please enter at least {minLength} characters',
    fieldMaxLength: 'Please enter fewer than {maxLength} characters',
    urlPattern: 'Please enter a valid http/https url',
  },
  dependents: 'dependents',
  addToTest: 'Add To Test',
  testCaseCount: '{count} cases',
  runAll: 'Run All',
  output: 'Output',
  debugThisCase: 'Debug this case',
  deleteThisCase: 'Delete this case',
  runThisCase: 'Run this case',
  subscribeAIService: 'Subscribe AI Service',
  diff: {
    created: 'New file',
    deleted: 'Deleted',
    modified: 'Modified',
  },
  restore: 'Revert changes',
  restoreConform: 'Are you sure you want to revert the changes in {path}?',
  copy: 'Copy',
  copied: 'Copied',
  activeMessageTip: 'Active this message',
  hideMessageTip: 'Hide this message',
  dragSort: 'Drag sort',
  sourceBranch: 'Source branch',
  noVariables: "You haven't added any variables yet",
  compare: {
    origin: 'Origin Data',
    current: 'Current Data',
    select: 'Select Commit',
    empty: 'Empty Data',
    diff: 'The file content is modified',
  },
  startTime: 'Start Time',
  endTime: 'End Time',
  duration: 'Duration',
  confirmDelete: 'Please input {name} to delete',
  confirmReset: 'Please input {name} to reset',
  deleteProjectAlertPrefix: 'This will permanently delete project with name',
  resetProjectAlertPrefix: 'This will reset example project with name',
  deleteProjectAlertSuffix: ' ',
  confirmTip: 'To confirm, please enter the name of the Project',
  resetProjectAlertSuffix: 'to initial state',
  selectObject: 'Select {object}',
  template: 'Template',
  call: {
    prompt: {
      select: 'Select Template',
    },
    api: {
      placeholder: 'API ',
      body: 'Body (JSON)',
    },
    func: {
      code: 'Code',
    },
    dataset: {
      search: 'Search',
    },
    list: {
      prompt: 'Execute Prompt',
      api: 'Execute API',
      func: 'Execute JS Function',
      dataset: 'Query Dataset',
      macro: 'Reference Macro',
    },
  },
  remoteGitRepo: 'Remote Git Repo',
  gitRepo: 'Git Repo',
  didSpaces: {
    title: 'DID Spaces',
  },
  deleteRemote: 'Unlink remote git repo',
  deleteRemoteTip: 'Are you sure you want to unlink the remote git repo?',
  deleteSucceed: 'Delete Succeed',
  url: 'URL',
  username: 'Username',
  projectName: 'Project Name',
  accessToken: 'Access Token',
  remoteGitRepoPasswordHelper: 'Github does not support password access, you can use',
  githubTokenTip:
    'Steps to get github access token:\n1. Click link navigate to github tokens\n2. Click "Generate new token"\n3. Fill the token name\n4. Repository access: Only select repositories\n5. Select your repository\n6. Repositories permissions: Contents -> Read and write\n7. Generate token',
  autoSync: 'Auto sync when saving',
  sync: 'Sync',
  synced: 'Synced',
  syncedAt: 'Synced at',
  viewData: 'View data',
  mergeConflict: 'Merge Conflict',
  mergeConflictTip: 'The remote data has been changed and cannot be automatically merged!',
  useRemote: 'Use Remote',
  useRemoteTip: 'Use <b>remote</b> data to overwrite <b>local</b> data',
  useLocal: 'Use Locale',
  useLocalTip: 'Use <b>local</b> data to overwrite <b>remote</b> data',
  validateTools: {
    parameter: {
      name: {
        base: '"name" must be a string',
        empty: '"name" cannot be empty',
        required: '"name" is a required field',
        exit: '"name" already exists',
      },
      description: {
        base: '"description" must be a string',
        empty: '"description" cannot be empty',
        required: '"description" is a required field',
      },
      type: {
        base: 'Type must be a string',
        only: 'Type must be "object"',
        required: 'Type is a required field',
      },
      properties: {
        base: 'Properties must be an object',
        required: 'Properties is a required field',
      },
      required: {
        base: 'Required must be an array of strings',
      },
    },
    prompt: {
      id: {
        base: 'Id must be a string',
        empty: 'Id cannot be empty',
        required: 'Id is a required field',
      },
      templateId: {
        base: 'Template ID must be a string',
        required: 'Template ID is a required field',
      },
      templateName: {
        base: 'Template name must be a string',
      },
      template: {
        base: 'Template must be an object',
        required: 'Template is a required field',
      },
      parameters: {
        base: 'Parameters must be an object',
      },
    },
    api: {
      id: {
        base: 'Id must be a string',
        empty: 'Id cannot be empty',
        required: 'Id is a required field',
      },
      method: {
        base: 'Method must be a string',
        empty: 'Method cannot be empty',
        required: 'Method is a required field',
      },
      url: {
        base: 'URL must be a string',
        uri: 'URL must be a valid URI',
        required: 'URL is a required field',
      },
    },
    func: {
      id: {
        base: 'Id must be a string',
        empty: 'Id cannot be empty',
        required: 'Id is a required field',
      },
      code: {
        base: 'Code must be a string',
        empty: 'Code cannot be empty',
        required: 'Code is a required field',
      },
    },
  },
  explorer: 'Explorer',
  branches: {
    one: '1 Branch',
    more: '{counts} Branches',
  },
  formatPrompt: 'Format Prompt',
  promptPlaceholder: 'Please enter your prompt',
  promptMessage: 'Prompt Message',
  executeBlock: 'Execute Block',
  executeMethods: 'Execute Methods',
  executeMethodsTip:
    'You have the option to run all the tools, or to choose one to execute from among multiple tools (the selection of the tool is made by AI, therefore the chosen tool depends on the names and descriptions of your tools).',
  executeSettings: 'Execute Settings',
  outputSettings: 'Output Settings',
  executeBlockName: 'Execute Block Name',
  executeBlockNameTip:
    "The execution block name can be used to add variables. For example: the execution block name is 'exampleVariable', and the name can be passed as a parameter. In other execution blocks of the same assistant or in a Prompt, it can be used by wrapping it with double braces (like this {{exampleVariable}}) to utilize the output of the execution block.",
  outputRole: 'Output Role',
  outputRoleTip: 'When the output is ignored, your execution block will not serve as context given to the AI.',
  outputPrefix: 'Output Prefix',
  outputPrefixTip: 'Add a fixed prefix to the output as a prompt.',
  outputSuffix: 'Output Suffix',
  outputSuffixTip: 'Add a fixed suffix to the output as a prompt.',
  callAPI: 'Call API',
  formatResult: 'Format Result',
  stayAsIs: 'Stay as is',
  asHistory: 'As Chat History',
  chatSubscribe: 'Hello, in order to continue chatting, please first subscribe to AI-KIT service',
  prepareExecutes: 'Prepare Executes',
  tool: 'Tool',
  callFunction: 'Call Function',
  collection: 'Collection manage',
  callPrompt: 'Call Prompt',
  method: 'Method',
  parameter: 'Parameter',
  haveNotAddedTip: "You haven't added any {object} blocks yet",
  selectTool: 'Select Tool',
  emptyInput: 'The input cannot be empty',
  userInput: 'Test Parameters',
  all: 'All',
  allTools: 'Execute All tools',
  selectPrompt: 'Select and execute one of tools',
  systemPrompt: 'Output as system prompt',
  userPrompt: 'Output as user prompt',
  assistantPrompt: 'Output as assistant prompt',
  ignoreOutput: 'Ignore output',
  nonExistentVariable: 'The "{data}" variable does not exist',
  addVariable: 'Add Variable',
  numberTip: 'The number of images to generate. Must be between 1 and 10. For dall-e-3, only n=1 is supported.',
  quality: 'Quality',
  qualityTip:
    'The quality of the image that will be generated. hd creates images with finer details and greater consistency across the image. This param is only supported for dall-e-3.',
  responseFormat: 'Response Format',
  responseFormatTip: 'The format in which the generated images are returned. Must be one of url or b64_json.',
  size: 'Size',
  sizeTip:
    'The size of the generated images. Must be one of 256x256, 512x512, or 1024x1024 for dall-e-2. Must be one of 1024x1024, 1792x1024, or 1024x1792 for dall-e-3 models.',
  style: 'Style',
  styleTip:
    'The style of the generated images. Must be one of vivid or natural. Vivid causes the model to lean towards generating hyper-real and dramatic images. Natural causes the model to produce more natural, less hyper-real looking images. This param is only supported for dall-e-3.',
  parametersTip:
    'Parameters can be inputted normally, or you can use the {{variable}} syntax to pass variables. If no parameters are provided, variables will be seamlessly passed through',
  selectByPromptParameterPlaceholder: 'Parameters without value will be provided by AI based on the prompt.',
  buildInData: 'API',
  assistantData: 'Assistant',
  asTemplateProject: 'As Template Project',
  cancelTemplateProject: 'Cancel Template Project',
  asExampleProject: 'As Example Project',
  cancelExampleProject: 'Cancel Example Project',
  execute: 'Execute',
  templates: 'Templates',
  options: 'Options',
  withCollectionManage: 'Collections Manage',
  update: 'Update',
  knowledge: {
    menu: 'Knowledge',
    parameter: 'User Dataset',
    createTitle: 'Create Knowledge',
    updateTitle: 'Update Knowledge',
    createDescription: "Import your own text data to enhance the LLM's context.",
    name: 'Knowledge Name',
    description: 'Knowledge Description',
    deleteTitle: 'Delete this Knowledge?',
    deleteDescription: 'Once deleted, references in related assistant will become invalid.',
    document: 'Document',
    documents: {
      create: 'Create Document',
      add: 'Add Document',
      edit: 'Edit Document',
      update: 'Update Document',
      name: 'Document Name',
      content: 'Document Content',
      type: 'Type',
      time: 'Creation Time',
      deleteTitle: 'Delete this document?',
      deleteDescription: 'Once deleted, references in related assistant will become invalid.',
      empty: 'No documents yet\n Click button to add document',
      file: {
        title: 'Upload Documents',
        description: 'Upload documents in Markdown、Txt、Doc、PDF format',
      },
      discussion: {
        title: 'Discussion Documents',
        description: 'Get the content from the discuss documents',
      },
      custom: {
        title: 'Customization Documents',
        description: 'Customize content, support creation & editing',
      },
    },
    segments: {
      segments: 'Segments',
      create: 'Create Segment',
      content: 'Segment Content',
      deleteTitle: 'Confirm whether to delete?',
      deleteDescription: 'This operation will not be reversed.',
      empty: 'No Segment yet',
      bits: 'Bits',
    },
    auto: 'Auto segmentation',
    file: {
      content: 'Click or drag documents here to upload \n Support Markdown、Txt、Doc、PDF format Documents',
      fail: 'Server processing failed',
      processing: 'Processing...',
      pending: 'Waiting for upload',
      completed: 'Server processing completed',
      Completed: 'Completed',
    },
    configure: 'Configure',
    rename: 'Rename',
  },
  discussion: 'Discussion',
  fullSite: 'FullSite',
  discussKit: 'DiscussKit',
  embeddingStartTime: 'Embedding Start',
  embeddingEndTime: 'Embedding End',
  embeddingStatus: 'Status',
  embeddingStatus_idle: 'Waiting',
  embeddingStatus_uploading: 'Pending',
  embeddingStatus_success: 'Success',
  embeddingStatus_error: 'Failed',
  showType: 'View Type',
  contentView: 'Content View',
  segmentsView: 'Segments View',
  shareTip: 'Access link',
  refreshTip: 'Reembedding',
  loginAsAdminButton: 'Login as Admin to view projects',
  login: 'Login to view projects',
  datasetDesc: 'Search for the data required by the context from the user dataset',
  types: 'Type',
  atLeastOne: 'Choose at least one type.',
  doc: 'Document',
  blog: 'Blog',
  reset: 'Reset',
  multipleCall: 'Run One or Multiple Tools',
  toolCalling: 'Run Selected Tools By Prompt',
  historyMessage: 'Get History Message',
  getStore: 'Get a Global State',
  setStore: 'Set a Global State',
  retrieveData: 'Get Data From Datasets',
  entries: 'Entries',
  entry: 'Entry',
  untitled: 'Untitled',
  emptyProjectTitle: 'No Project Yet',
  emptyProjectSubtitle: "You haven't created a project yet.",
  choose: 'Choose Template',
  emptyVariablesTitle: 'No variables Yet',
  emptyVariablesSubtitle: "You haven't added any variables yet.",
  emptyExecute: 'No execute Yet',
  branchName: 'Branch Name',
  respondAs: 'Respond',
  none: 'None',
  respondAsMessage: 'Respond as a message',
  respondAsSystemMessage: 'Respond as a system message',
  edit: 'Edit',
  share: 'View',
  refresh: 'Refresh',
  outputName: 'Output Name',
  outputNameTip: 'Set aliases to facilitate the use of other execution blocks',
  entryFunctionDisabledTip: 'Entry function is disabled in "Collections Manage" mode',
  board: 'Board Data',
  data: 'Data',
  importFiles: 'Import Files',
  importFromDiscussion: 'Import from Discussion',
  discussionType: 'Discussion Type',
  discussionBoards: 'Discussion Boards',
  discussionData: 'Discussion Data',
  noDocument: 'No Document Here',
  noDocumentDesc: 'Your document list is currently empty',
  copyTool: 'Copy Tool',
  visitLink: 'Visit Link',
  variableParameter: {
    from: 'Data Source',
    custom: 'From User Input',
    tool: 'From Agent Output',
    datastore: 'From Data Memory',
    unselect: 'Unselected Agent',
    fromDetail: 'Data Details',
    setting: 'Settings',
    toolSetting: 'Storage Settings',
    storageSetting: 'Data Settings',
    itemId: 'SubItem Id',
    scope: 'Data Source',
    defaultValue: 'Default Value',
    persist: 'Persist',
    reset: 'Cover History Data',
    global: 'Global',
    session: 'Session',
    user: 'User',
    cache: 'Cache Request Data',
    scopeKey: 'Scope key',
    selectAgent: 'Select Agent',
    duplicate: 'Data already exist.',
    tip: 'Scope: {scope}, DataType: {type}',
    knowledge: 'From Knowledge',
    fromAgentParameter: 'From Agent Input Parameter',
    fromKnowledgeParameter: 'From Knowledge Input Parameter',
  },
  variables: {
    name: 'Data Name',
    count: 'Data Count',
    value: 'Data Value',
    itemId: 'Data SubItem',
    type: 'Data Type',
    useAssistant: 'Used by Agent',
  },
  userId: 'USER ID',
  sessionId: 'SESSION ID',
  assistantId: 'Assistant',
  outputVariables: 'Output Variables',
  history: {
    title: 'History Memory',
    limit: 'Number of messages retrieved',
    keyword: 'Keyword of messages retrieved',
  },
  outputVariableParameter: {
    addData: 'Add Data',
    keyRequired: 'Key is Required',
    key: 'Key',
    scope: 'Scope',
    scopeRequired: 'Scope is Required',
    changeTypeTitle: 'Confirm update type?',
    changeTypeDesc: 'The name of the new variable is {key} and the type of the variable is {type}',
    typeRequired: 'Type is Required',
    typeBeDefined: 'The variable type has already been defined and the type can only be "{type}"',
    dataType: 'DataType',
    change: 'At present, it is associated with memory storage, which will be unassociated after modification.',
    compareObject: 'The data type has been defined and cannot be modified. Please define it as a new variable',
  },
  outputFormat: 'Output Format',
  json: 'JSON',
  custom: 'Custom',
  backgroundImage: 'Background Image',
  backgroundColor: 'Background Color',
  inputController: 'Input Controller',
  suggestedQuestions: 'Suggested Questions',
  processing: 'Processing',
  generatedImages: 'Generated Images',
  projectLimitExceeded: 'Project limit exceeded (current: {current}, limit: {limit})',
  streamTextResponse: 'Generated Text Stream',
  referencedLinks: 'Referenced Links',
  submit: 'Submit',
  memory: {
    title: 'Memory',
    extractMemory: 'Extract From Memory',
    saveMemory: 'Save To Memory',
    add: 'Add new Memory',
    empty: 'No Memory Yet',
  },
  source: 'Source',
  clickToUploadAgentLogo: 'Click to upload a profile picture for the agent',
  copyToMyProjects: 'Copy to My Projects',
  agentName: 'Agent name',
  agentNamePlaceholder: 'Give the Agent a unique name',
  agentDescription: 'Agent description',
  agentDescriptionPlaceholder: "Introduce the agent's features. The description will be displayed to the agent's users",
  agentLogo: 'Profile picture',
  openingText: 'Opening text',
  openingTextPlaceholder: "Enter the agent's opening text",
  chatButton: 'Chat button',
  buttonTitle: 'Button title',
  chatLimit: 'Chat limit',
  maxChatRoundLimit: 'Maximum chat turns',
  reachMaxRoundLimitTip: 'Chat end message',
  enabled: 'Enabled',
  pricing: 'Pricing',
  pricingUnit: 'ABT / Message',
  pricingRequiredMessage: 'Please enter a price',
  pricingInvalidMessage: 'Please enter a valid price',
  pricingPatternMessage: 'Please enter a valid price with up to {decimal} decimal places',
  published: 'Published',
  publish: 'Publish',
  publishedLink: 'Published Link',
  publishUpdate: 'Publish Update',
  publishSuccess: 'Published successfully',
  publishUpdateSuccess: 'Update published successfully',
  payment: 'Payment',
  openingQuestion: 'Opening question',
  input: 'Input',
  designTemplate: 'Design template',
  question: 'Chat',
  datasetId: 'Use Knowledge',
  customize: 'Customize',
  saveAs: 'Save As',
  dataSource: 'Data Source',
  outputAs: 'Output as Variable/Memory',
});
