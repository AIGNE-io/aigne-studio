import { flatten } from 'flat';

export default flatten({
  name: 'Name',
  add: 'Add',
  project: 'Project',
  branch: 'Branch',
  form: 'Form',
  chat: 'Chat',
  tag: 'Tag',
  rename: 'Rename',
  actions: 'Actions',
  title: 'Title',
  placeholder: 'Placeholder',
  label: 'Label',
  value: 'Value',
  defaultValue: 'Default Value',
  helperText: 'Helper Text',
  required: 'Required',
  minLength: 'Min Length',
  maxLength: 'Max Length',
  min: 'Min',
  max: 'Max',
  addObject: 'Add {object}',
  option: 'Option',
  number: 'Number',
  select: 'Select',
  language: 'Language',
  languageSelect: 'Language Select',
  multiline: 'Multiline',
  alert: {
    export: 'Export',
    import: 'Import',
    imported: 'Imported',
    saveChanges: 'Your updated data has not been saved, are you sure to leave?',
    discard: 'Discard',
    discardChanges: 'Discard all changes?',
    deleteTemplate: 'Delete template "{template}"?',
    deleteTemplateContent: 'There are {references} templates referencing this template',
    exportTip: 'The following templates will be exported',
    importTip: 'The following templates will be imported',
    deleteTemplates: 'The following templates will be deleted',
    delete: 'Delete',
    edit: 'Edit',
    saved: 'Saved',
    savedButSyncConflicted: 'Saved, but sync with remote conflict!',
    deleted: 'Deleted',
    overwrittenTip: 'This template will be overwritten',
    downloadBackup: 'Download backup',
    openInAssistant: 'Open in Assistant',
    duplicate: 'Duplicate',
    copyId: 'Copy Id',
    unnamed: 'Unnamed',
    search: 'Search',
    noCommits: 'No Commits',
    updatedAt: 'Updated At',
    history: 'History',
    branchCreated: 'Branch created',
    onBranchTip: 'You are now in history, you need to create a branch to save your changes!',
    deleteBranch: 'Delete branch "{branch}"?',
    showAllBranches: 'Show all branches',
    pickFromBranch: 'Pick from branch',
    saveInNewBranch: 'Save in new branch',
    newBranchRequired: 'New branch is required',
    currentBranch: 'Current branch',
    message: 'Message',
    compare: 'Version compare',
    unsave: {
      title: 'Unsaved Changes',
      content: ' Your changes have not been saved yet!',
    },
  },
  import: {
    remote: 'Import from git repo',
    remoteDescription: 'Import a project from an existing git repository, such as GitHub.',
    didSpaces: 'Import from DID Spaces',
    didSpacesTitle: 'Import project from DID Spaces',
    fromCurrentDidSpaceImport: 'Import a project from the currently connected DID Space({name})',
    fromOtherDidSpaceImport: 'Select DID Space and import the project',
    bindWallet: {
      title: 'Please bind DID Wallet before continuing to import',
      scan: 'Scan the QR code below with your DID Wallet to bind DID Wallet',
      confirm: 'Confirm with DID Wallet',
      success: 'Congratulations, binding successful!',
    },
    selectProject: 'Select Project',
    selectBranch: 'Select Branch',
    selectAgentTip: 'Please select the agent first',
    empty: 'No agents to import.',
  },
  emptyToolPlaceholder: 'Add an assistant as a tool to execute, select, and other capabilities.',
  defaultTool: 'Default Agent',
  setDefaultTool: 'Set as default Agent',
  unsetDefaultTool: 'Unset default Agent',
  translate: 'Tool name english translate',
  functionName:
    'The name of the proactive translation assistant can be used as a template for selection. If the function name is not in English, it cannot be recognized. If it is already in English, there is no need for translation.',
  newFromTemplates: 'New from Templates',
  myProjects: 'My Projects',
  examples: 'Examples',
  duplicate: 'Duplicate',
  pin: 'Pin',
  unpin: 'Unpin',
  stopped: 'Stopped has been selected in advance',
  delete: 'Delete',
  open: 'Open',
  unnamed: 'Unnamed',
  description: 'Description',
  blank: 'Blank',
  create: 'Create',
  newObject: 'New {object}',
  newObjectWithType: 'New "{object}" {type}',
  editObject: 'Edit {object}',
  importObject: 'Import {object}',
  createdAt: 'Created at',
  home: 'Home',
  prompts: 'Prompts',
  imageBlender: 'Image Blender',
  functions: 'Functions',
  function: 'Function',
  api: 'API',
  logs: 'Logs',
  parameters: 'Parameters',
  model: 'Model',
  images: 'Images',
  inputParameters: 'Inputs',
  fnArgs: 'Function parameters',
  promptMessages: 'Prompts',
  temperature: 'Temperature',
  temperatureTip:
    'Adjusting the Temperature can control the diversity of generated text. A low Temperature will make the generated text more consistent and predictable, while a high Temperature will increase the randomness and creativity of the text.',
  topP: 'TopP',
  topPTip:
    "Adjusting TopP can control the length and diversity of the generated text. A lower TopP value narrows down the model's selection range, resulting in more coherent text, while a higher TopP value introduces more choices, increasing the diversity of the text.",
  presencePenalty: 'Presence Penalty',
  presencePenaltyTip:
    'Adjusting the Presence Penalty can affect the frequency of repeated topics in the generated text. A higher Presence Penalty value will reduce the occurrence of repeated topics, resulting in more fresh and diverse content, while a lower Presence Penalty value may lead to more repetition of topics.',
  frequencyPenalty: 'Frequency Penalty',
  frequencyPenaltyTip:
    'Adjusting the Frequency Penalty allows for control over the occurrence of repeated words and phrases in the generated text. A higher Frequency Penalty value will reduce the likelihood of repetitions, while a lower Frequency Penalty value may increase the repetition of learned phrases and words from previously generated text.',
  maxTokens: 'Max Tokens',
  maxTokensTip:
    "The maximum number of tokens to generate in the completion. The token count of your prompt plus Max Tokens cannot exceed the model's context length.",
  type: 'Type',
  text: 'Text',
  boolean: 'Boolean',
  object: 'Object',
  array: 'Array',
  image: 'Image',
  mode: 'Mode',
  formMode: 'Form',
  chatMode: 'Chat',
  clearSession: 'Clear current session history',
  deleteSession: 'Delete current session',
  showSidebar: 'Show sidebar',
  hideSidebar: 'Hide sidebar',
  folder: 'folder',
  agent: 'Agent',
  agents: 'Agents',
  prompt: 'Prompt',
  send: 'Send',
  stop: 'Stop',
  session: 'Session',
  setting: 'Setting',
  settings: 'Settings',
  debug: 'Debug',
  save: 'Save',
  cancel: 'Cancel',
  ok: 'Ok',
  commitMessage: 'Note',
  confirm: 'Confirm',
  fontFamily: 'Font Family',
  projectSetting: {
    tabs: {
      basic: 'Basic',
      modelInfo: 'Model',
      git: 'Git',
      didSpaces: 'DID Spaces',
      appearance: 'Appearance',
      readme: 'README',
    },
    selectProject: 'Select Project',
    name: 'Project name',
    description: 'Project description',
    gitType: {
      title: 'Git Version',
      simple: {
        title: 'Simple mode',
        subTitle: "Just need simple version control, or don't care about version issues.",
      },
      default: {
        title: 'Professional Mode (familiar with Git)',
        subTitle:
          'Users are familiar with the basic knowledge of Git version management and need perfect version management ability.',
      },
    },
    baseInfo: 'Basic Information',
    defaultModel: 'Default Model',
    icon: 'Select or Upload Icon',
    selectedFail: 'Please select a picture first',
    fontFamily: {
      body: 'Body Font',
      title: 'Title Font',
    },
    readme: 'README',
  },
  notOpenFile: 'Open an agent to continue',
  noProjectTip: "You haven't created any projects yet. You can create one from the template above!",
  aboutTokens: 'About {tokens}',
  test: 'Tests',
  discuss: 'Collaboration',
  variable: 'Variable',
  loading: 'Loading...',
  noData: 'No data',
  dataset: 'Dataset',
  next: 'Next',
  public: 'Public',
  nonPublic: 'Non-public',
  noPermissionSaveToBranch: 'You do not have permission to save data to branch {branch}',
  validation: {
    fieldRequired: 'Please fill out this field',
    fieldMax: 'Please enter a value less than {max}',
    fieldMin: 'Please enter a value greater than {min}',
    fieldMinLength: 'Please enter at least {minLength} characters',
    fieldMaxLength: 'Please enter fewer than {maxLength} characters',
    urlPattern: 'Please enter a valid http/https url',
    whitespace: 'Please enter non-whitespace characters',
    nameExists: 'Project name already exists',
  },
  dependents: 'dependents',
  addToTest: 'Save as test case',
  testCaseCount: '{count} cases',
  runAll: 'Run All',
  output: 'Output',
  debugThisCase: 'Debug this case',
  deleteThisCase: 'Delete this case',
  runThisCase: 'Run this case',
  diff: {
    created: 'New file',
    deleted: 'Deleted',
    modified: 'Modified',
  },
  restore: 'Revert changes',
  restoreConform: 'Are you sure you want to revert the changes in {path}?',
  copy: 'Copy',
  copied: 'Copied',
  activeMessageTip: 'Active this message',
  hideMessageTip: 'Hide this message',
  dragSort: 'Drag sort',
  sourceBranch: 'Source branch',
  noVariables: "You haven't added any variables yet",
  compare: {
    origin: 'Origin Data',
    current: 'Current Data',
    select: 'Select Commit',
    empty: 'Empty Data',
    diff: 'The file content is modified',
  },
  startTime: 'Start Time',
  endTime: 'End Time',
  duration: 'Duration',
  confirmDelete: 'Please input {name} to delete',
  confirmReset: 'Please input {name} to reset',
  deleteProjectAlertPrefix: 'This will permanently delete project with name',
  resetProjectAlertPrefix: 'This will reset example project with name',
  deleteProjectAlertSuffix: ' ',
  confirmTip: 'To confirm, please enter the name of the Project',
  resetProjectAlertSuffix: 'to initial state',
  selectObject: 'Select {object}',
  template: 'Template',
  call: {
    prompt: {
      select: 'Select Template',
    },
    api: {
      placeholder: 'API ',
      body: 'Body (JSON)',
    },
    func: {
      code: 'Code',
    },
    dataset: {
      search: 'Search',
    },
    list: {
      prompt: 'Execute Prompt',
      api: 'Execute API',
      func: 'Execute JS Function',
      dataset: 'Query Dataset',
      macro: 'Reference Macro',
    },
  },
  remoteGitRepo: 'Remote Git Repo',
  gitRepo: 'Git Repo',
  didSpaces: {
    title: 'DID Spaces',
  },
  deleteRemote: 'Unlink remote git repo',
  deleteRemoteTip: 'Are you sure you want to unlink the remote git repo?',
  deleteSucceed: 'Delete Succeed',
  url: 'URL',
  username: 'Username',
  projectName: 'Project Name',
  accessToken: 'Access Token',
  remoteGitRepoPasswordHelper: 'Github does not support password access, you can use',
  githubTokenTip:
    'Steps to get github access token:\n1. Click link navigate to github tokens\n2. Click "Generate new token"\n3. Fill the token name\n4. Repository access: Only select repositories\n5. Select your repository\n6. Repositories permissions: Contents -> Read and write\n7. Generate token',
  autoSync: 'Auto sync when saving',
  sync: 'Sync',
  synced: 'Synced',
  syncedAt: 'Synced at',
  viewData: 'View data on DID Spaces',
  mergeConflict: 'Merge Conflict',
  mergeConflictTip: 'The remote data has been changed and cannot be automatically merged!',
  remoteGitRepoUnauthorized: 'No operation permission',
  remoteGitRepoUnauthorizedTip:
    'We are aware that you are experiencing authorization issues when trying to access our services. Here are some possible causes and solutions:\n\n• Invalid access token.\n• Token has expired.\n• Permission is insufficient.\n\nPlease ensure your access token is valid, or reauthorize to obtain a new token.',
  remoteGitRepoUnauthorizedToast: 'No operation permission, please check the access token',
  useRemote: 'Use Remote',
  useRemoteTip: 'Use <b>remote</b> data to overwrite <b>local</b> data',
  useLocal: 'Use Locale',
  useLocalTip: 'Use <b>local</b> data to overwrite <b>remote</b> data',
  explorer: 'Explorer',
  branches: {
    one: '1 Branch',
    more: '{counts} Branches',
  },
  formatPrompt: 'Format Prompt',
  promptPlaceholder: "Write your prompt here, enter '{' to insert a variable",
  promptMessage: 'Prompt Message',
  executeBlock: 'Execute Block',
  executeMethods: 'Execute Methods',
  executeMethodsTip:
    'You have the option to run all the tools, or to choose one to execute from among multiple tools (the selection of the tool is made by AI, therefore the chosen tool depends on the names and descriptions of your tools).',
  executeSettings: 'Execute Settings',
  outputSettings: 'Output Settings',
  executeBlockName: 'Execute Block Name',
  executeBlockNameTip:
    "The execution block name can be used to add variables. For example: the execution block name is 'exampleVariable', and the name can be passed as a parameter. In other execution blocks of the same assistant or in a Prompt, it can be used by wrapping it with double braces (like this {{exampleVariable}}) to utilize the output of the execution block.",
  outputRole: 'Output Role',
  outputRoleTip: 'When the output is ignored, your execution block will not serve as context given to the AI.',
  outputPrefix: 'Output Prefix',
  outputPrefixTip: 'Add a fixed prefix to the output as a prompt.',
  outputSuffix: 'Output Suffix',
  outputSuffixTip: 'Add a fixed suffix to the output as a prompt.',
  callAPI: 'Call API',
  formatResult: 'Format Result',
  stayAsIs: 'Stay as is',
  asHistory: 'As Chat History',
  prepareExecutes: 'Prepare Executes',
  tool: 'Agent',
  callFunction: 'Call Function',
  collection: 'Collection manage',
  callPrompt: 'Call Prompt',
  method: 'Method',
  selectTool: 'Select Agent',
  emptyInput: 'The input cannot be empty',
  all: 'All',
  allTools: 'Execute All tools',
  selectPrompt: 'Select and execute one of tools',
  systemPrompt: 'Output as system prompt',
  userPrompt: 'Output as user prompt',
  assistantPrompt: 'Output as assistant prompt',
  ignoreOutput: 'Ignore output',
  nonExistentVariable: 'The "{data}" variable does not exist',
  addVariable: 'Add Variable',
  numberTip: 'The number of images to generate. Must be between 1 and 10. For dall-e-3, only n=1 is supported.',
  quality: 'Quality',
  qualityTip:
    'The quality of the image that will be generated. hd creates images with finer details and greater consistency across the image. This param is only supported for dall-e-3.',
  responseFormat: 'Response Format',
  responseFormatTip: 'The format in which the generated images are returned. Must be one of url or b64_json.',
  size: 'Size',
  sizeTip:
    'The size of the generated images. Must be one of 256x256, 512x512, or 1024x1024 for dall-e-2. Must be one of 1024x1024, 1792x1024, or 1024x1792 for dall-e-3 models.',
  style: 'Style',
  styleTip:
    'The style of the generated images. Must be one of vivid or natural. Vivid causes the model to lean towards generating hyper-real and dramatic images. Natural causes the model to produce more natural, less hyper-real looking images. This param is only supported for dall-e-3.',
  parametersTip:
    'Parameters can be inputted normally, or you can use the {{variable}} syntax to pass variables. If no parameters are provided, variables will be seamlessly passed through',
  selectByPromptParameterPlaceholder: 'Parameters without value will be provided by AI based on the prompt.',
  buildInData: 'API',
  assistantData: 'Assistant',
  asTemplateProject: 'As Template Project',
  cancelTemplateProject: 'Cancel Template Project',
  asExampleProject: 'As Example Project',
  cancelExampleProject: 'Cancel Example Project',
  execute: 'Execute',
  templates: 'Templates',
  options: 'Options',
  withCollectionManage: 'Collections Manage',
  update: 'Update',
  knowledge: {
    namePlaceholder: "Give your knowledge a name (e.g. xxx's Docs / My Notes)",
    knowledgeBase: 'Knowledge',
    knowledge: 'Knowledge',
    menu: 'Knowledge',
    name: 'Knowledge Name',
    description: 'Knowledge Description',
    deleteTitle: 'Delete this {object}?',
    deleteDescription: 'Once deleted, references in related assistant will become invalid.',
    type: 'Type',
    segments: {
      segments: 'Segments',
      create: 'Create Segment',
      content: 'Segment Content',
      empty: 'No Segment yet',
      bits: 'Bits',
    },
    configure: 'Configure',
    rename: 'Rename',
    docs: 'Document',
    importKnowledgeSuccess: 'Import Resource as Knowledge success',
    noKnowledge: 'No Knowledge Yet',
    noKnowledgeTip: 'You can install knowledge from blocklet store',
    installKnowledgeFromBlocklet: 'Install Knowledge from Blocklet',
    import: 'Import from file',
    custom: 'Custom',
    discussKit: 'Discuss Kit',
    crawl: 'Crawl from URL',
    createKnowledgeSuccess: 'Create knowledge success',
    importKnowledge: {
      title: 'Select Data Source',
      description:
        'After adding sources, the AI can provide answers based on the information that matters most to you.',
      fileImport: 'Import Files',
      support: 'Support Markdown, Txt, Doc, PDF format',
      provider: 'Provider',
      apiKey: 'API Key',
      url: 'URL',
      apiKeyNotSet: 'Please set the API key first',
      uploadFailed: 'Failed to import file, please check whether to select the file',
    },
    playground: 'Playground',
    emptyDocuments: "You haven't imported any knowledge yet.",
  },
  content: 'Content',
  search: 'Search',
  discussion: 'Discussion',
  fullSite: 'FullSite',
  discussKit: 'DiscussKit',
  embeddingStartTime: 'Embedding Start',
  embeddingEndTime: 'Embedding End',
  embeddingStatus: 'Indexing Status',
  embeddingStatus_idle: 'Waiting',
  embeddingStatus_uploading: 'Pending',
  embeddingStatus_success: 'Success',
  embeddingStatus_error: 'Failed',
  showType: 'View Type',
  contentView: 'Content View',
  segmentsView: 'Segments View',
  shareTip: 'Access link',
  refreshTip: 'Reembedding',
  loginAsAdminButton: 'Login as Admin to view projects',
  login: 'Login to view projects',
  datasetDesc: 'Search for the data required by the context from the user dataset',
  types: 'Type',
  atLeastOne: 'Choose at least one type.',
  doc: 'Document',
  blog: 'Blog',
  reset: 'Reset',
  multipleCall: 'Run One or Multiple Tools',
  toolCalling: 'Run Selected Tools By Prompt',
  historyMessage: 'Get History Message',
  getStore: 'Get a Global State',
  setStore: 'Set a Global State',
  retrieveData: 'Get Data From Datasets',
  entries: 'Entries',
  entry: 'Entry',
  untitled: 'Untitled',
  emptyProjectTitle: 'No Project Yet',
  emptyProjectSubtitle: "You haven't created a project yet.",
  choose: 'Choose Template',
  emptyVariablesTitle: 'No variables Yet',
  emptyVariablesSubtitle: "You haven't added any variables yet.",
  emptyExecute: 'No execute Yet',
  branchName: 'Branch Name',
  respondAs: 'Respond',
  none: 'None',
  respondAsMessage: 'Respond as a message',
  respondAsSystemMessage: 'Respond as a system message',
  edit: 'Edit',
  share: 'Share',
  view: 'View',
  refresh: 'Refresh',
  outputName: 'Output Name',
  outputNameTip: 'Set aliases to facilitate the use of other execution blocks',
  entryFunctionDisabledTip: 'Entry function is disabled in "Collections Manage" mode',
  board: 'Board Data',
  data: 'Data',
  importFiles: 'Import Files',
  importFromDiscussion: 'Import from Discussion',
  discussionType: 'Discussion Type',
  discussionBoards: 'Discussion Boards',
  discussionData: 'Discussion Data',
  noDocument: 'No Document Here',
  noDocumentDesc: 'Your document list is currently empty',
  copyTool: 'Copy Tool',
  visitLink: 'Visit Link',
  variableParameter: {
    secret: 'Secret',
    custom: 'User input',
    tool: 'Another Agent',
    datastore: 'Memory',
    unselect: 'Unselected Agent',
    fromDetail: 'Data Details',
    setting: 'Settings',
    toolSetting: 'Storage Settings',
    storageSetting: 'Data Settings',
    itemId: 'SubItem Id',
    scope: 'Scope',
    defaultValue: 'Default Value',
    persist: 'Persist',
    reset: 'Overwrite on save',
    global: 'Global',
    session: 'Session',
    user: 'User',
    cache: 'Cache Request Data',
    scopeKey: 'Scope key',
    selectAgent: 'Select Agent',
    duplicate: 'Data already exist.',
    tip: 'Scope: {scope}, DataType: {type}',
    knowledge: 'Knowledge',
    fromAgentParameter: 'From Agent Input Parameter',
    fromKnowledgeParameter: 'From Knowledge Input Parameter',
    agent: 'Call {agent} Agent',
    call: 'Call',
  },
  variables: {
    name: 'Data Name',
    count: 'Data Count',
    value: 'Data Value',
    itemId: 'Data SubItem',
    type: 'Data Type',
    useAssistant: 'Used by Agent',
  },
  history: {
    title: 'Conversation History',
    limit: 'Number of retrieved messages',
    keyword: 'Keyword of retrieved messages',
  },
  outputVariableParameter: {
    add: 'Add',
    edit: 'Edit',
    memory: 'Memory',
    keyRequired: 'Key is Required',
    key: 'Key',
    scope: 'Scope',
    scopeRequired: 'Scope is Required',
    changeTypeTitle: 'Confirm update type?',
    changeTypeDesc: 'The name of the new memory is {key} and the type of the memory is {type}',
    typeRequired: 'Type is Required',
    typeBeDefined: 'The memory type has already been defined and the type can only be "{type}"',
    dataType: 'DataType',
    change: 'At present, it is associated with memory storage, which will be unassociated after modification.',
    compareObject: 'The data type has been defined and cannot be modified. Please define it as a new memory',
  },
  outputFormat: 'Output Format',
  json: 'JSON',
  custom: 'Custom',
  backgroundImage: 'Background Image',
  backgroundColor: 'Background Color',
  inputController: 'Input Controller',
  suggestedQuestions: 'Suggested Questions',
  processing: 'Processing',
  generatedImages: 'Generated Images',
  projectLimitExceeded: 'Project limit exceeded (current: {current}, limit: {limit})',
  streamTextResponse: 'Generated Text Stream',
  referencedLinks: 'Referenced Links',
  submit: 'Submit',
  memory: {
    title: 'Memory',
    extractMemory: 'Extract From Memory',
    saveMemory: 'Save To Memory',
    add: 'Add new Memory',
    empty: 'No Memory Yet',
    name: 'Name',
    type: 'Data Type',
  },
  source: 'Source',
  clickToUploadAgentLogo: 'Click to upload a profile picture for the agent',
  copyToMyProjects: 'Copy to My Projects',
  agentName: 'Agent name',
  agentNamePlaceholder: 'Give the Agent a unique name',
  agentDescription: 'Agent description',
  agentDescriptionPlaceholder: "Introduce the agent's features. The description will be displayed to the agent's users",
  agentLogo: 'Agent Logo',
  openingText: 'Opening text',
  openingTextPlaceholder: "Enter the agent's opening text",
  chatButton: 'Chat button',
  buttonText: 'Button Text',
  chatLimit: 'Chat limit',
  maxChatRoundLimit: 'Maximum chat turns',
  reachMaxRoundLimitTip: 'Chat end message',
  enabled: 'Enabled',
  disabled: 'Disabled',
  enableObject: 'Enable {object}',
  pricing: 'Pricing',
  pricingUnit: 'ABT / Message',
  pricingRequiredMessage: 'Please enter a price',
  pricingInvalidMessage: 'Please enter a valid price',
  pricingPatternMessage: 'Please enter a valid price with up to {decimal} decimal places',
  published: 'Published',
  publish: 'Publish',
  publishedLink: 'Published Link',
  publishUpdate: 'Publish Update',
  publishSuccess: 'Published successfully',
  publishUpdateSuccess: 'Update published successfully',
  payment: 'Payment',
  paymentSettings: 'Payment Settings',
  noReleasePaymentProjectTip: 'Payment features are temporarily disabled',
  openingQuestion: 'Opening question',
  openingQuestionPlaceholder: 'Recommended questions for users to ask',
  input: 'Input',
  appearance: 'Appearance',
  dialogSettings: 'Interaction Settings',
  appearanceTemplate: 'Template',
  question: 'Question',
  questionInputTitle: 'Chat input',
  datasetId: 'Use Knowledge',
  saveToMemory: 'Save to memory',
  dataSource: 'Data Source',
  customOutput: 'Custom output',
  selectAgentOutput: 'Route Agent output',
  customInput: 'Custom input',
  llm: 'LLM',
  largeLanguageModel: 'Large Language Model',
  imageGeneration: 'Image Generation',
  code: 'Code',
  addDocumentToDataset: 'Add Document To {dataset}',
  newProjectNamePlaceholder: 'Let your project shine with a unique name',
  newProjectDescriptionPlaceholder: 'Briefly describe your app to the world',
  gitUrl: 'Git URL',
  importFromGitAccessTokenPlaceholder: 'Token for accessing Git repository (leave blank if the repository is public)',
  selectProjectToImportPlaceholder: 'Select a project to import',
  inputParameterKeyPlaceholder: 'Name of Input',
  inputParameterLabelPlaceholder: 'Name of Input (e.g. subject, name, age)',
  inputParameterPlaceholderPlaceholder: 'Describe to the user how to fill in this input',
  inputParameterRequiredLabel: 'Is this input required',
  selectKnowledgePlaceholder: 'Select a knowledge to query',
  selectMemoryPlaceholder: 'Select a memory',
  selectAgentToCallPlaceholder: 'Select an agent to call',
  selectOpenAPIToCallPlaceholder: 'Select Blocklet API to call',
  outputVariableName: 'Output name',
  outputVariablePlaceholder: 'Describe this output (optional)',
  outputVariablePlaceholderForLLM: 'Prompt to LLM how to fill this output',
  outputParameterRequiredLabel: 'Is this output required',
  outputParameterDefaultValuePlaceholder: 'Give this output a default value if LLM has not filled it',
  close: 'Close',
  maxUploadFileLimit:
    'The size of the uploaded file exceeds the maximum value. The size of the uploaded file cannot exceed {limit} MB',
  backHome: 'Back Home',
  agentOutput: 'Agent Outputs',
  inputs: 'Inputs',
  outputs: 'Outputs',
  idle: 'Idle',
  logic: 'Logic',
  javascript: 'Javascript',
  idleAgentDescription: 'This agent does not need to do any processing',
  format: 'Format',
  from: 'From',
  group: 'Group',
  uploadNewIcon: 'You can upload the new project logo',
  appearancePage: 'Layout',
  appearanceInput: 'Inputs',
  appearanceOutput: 'Outputs',
  children: 'Children',
  selectCustomComponent: 'Select a component',
  noInputsTip: 'This agent has no input',
  preview: 'Preview',
  previewInNewTab: 'Preview in new tab',
  copyPreviewUrl: 'Copy preview URL',
  system: 'System',
  agentEmptyTitle: '‌No Agent Created',
  agentEmptySubTitle: 'Click "+" create your first agent',
  back: 'Back',
  router: 'Decision',
  addRoute: 'Add Decision',
  noAgent: 'No Agent',
  addAgent: 'Add Agent',
  diffRouteName:
    '"{agentName}" has the same "{routeName}" output parameter, but the "{routeName}" type is different, please modify to keep the type consistent ',
  diffRouteNameByType:
    '"{agentName}" has the same output parameter {routeName}, whose type is {type}, but the attributes are inconsistent. Please modify the output parameter to keep the type consistent',
  selectRouteAgent: 'Select Agent Prompt',
  notFoundOutputKeyFromSelectAgents:
    '{name} does not contain the selected output variable of the Agent, please choose in [{outputNames}] fields',
  requiredOutputParams: '{name} is a required field',
  notRequiredOutputParams: '{name} is a not required field',
  diffOutputType: '{name} must be {type} type',
  diffTypeKeys: '{name} is {type} type, must contain key in {keys}',
  routeTitle: 'Decision Agent Title',
  routeDesc: 'Decision Agent Description',
  promptRequired: 'Prompt is required',
  twitter: 'Twitter',
  community: 'ArcBlock Community',
  link: 'Link',
  saveAs: 'Save as',
  openingQuestions: 'Opening Questions',
  openingMessage: 'Opening Message',
  chooseObject: 'Choose {object}',
  allContent: 'All Content',
  searchContent: 'Search Content',
  profile: 'Profile',
  avatar: 'Avatar',
  outputFromInputPlaceholder: 'From Input "{input}"',
  author: 'Author',
  updatedAt: 'Updated At',
  launchMore: 'Launch for more',
  launchMoreContent:
    "You've reached the limit of {length} projects.\nLaunch your own AI Studio to create more projects 👇",
  launchMoreConfirm: 'Launch My AI Studio',
  authorize: 'Authorize',
  reauthorize: 'Reauthorize',
  primaryColor: 'Primary Color',
  authorizeApiKeyTip: 'Your api key is secure and only valid for the current project.',
  icon: 'Icon',
  iconAndTitle: 'Icon & Title',
  basic: 'Basic',
  appearanceTitlePlaceholder: 'The title displayed above this output',
  appearanceIconPlaceholder: 'The icon displayed above this output',
  addMoreAgentTools: 'Install more Models',
  noAgents: 'No Agents',
  buildIn: 'buildIn',
  remote: 'remote',
  onlyAdminsAllowAddMoreAgents: 'Only admins can add more agents',
  llmInputMessages: 'LLM Messages',
  llmInputTools: 'LLM Tools',
  llmInputToolChoice: 'LLM Tool Choice',
  llmInputResponseFormat: 'LLM Response Format',
  llmResponseStream: 'LLM Response Stream',
  llmProviderPlaceholder: 'Select a LLM provider from store',
  provider: 'Provider',
  default: 'Default',
  setAsEntry: 'Set as entry agent',
  entryAgent: 'Entry',
  attachUrl: 'Attach link when sharing',
  attachInputs: 'Attach inputs when sharing',
  usage: 'Usage',
  docLink: 'Document link',
  inputParameterLinkPlaceholder: 'Link to the document that describes this input',
  hideOutputSetting: 'Hide current output setting',
  activeOutputTip: 'Active output',
  hideOutputTip: 'Hide output',
  activeParameterTip: 'Active Input',
  hideParameterTip: 'Hide Input',
  callAgent: 'Call Agent',
  referenceOutput: 'From {agent} Output',
  ref: 'From',
  refOutput: 'Call agent does not currently support custom output',
  addParameter: 'Add Parameter',
  variableNotReferenced: 'The variable is not referenced',
  cache: 'Cache',
  time: 'Time',
  cronJob: 'Cron Job',
  cronJobs: 'Cron Jobs',
  cronJobsSummary: 'Jobs {jobs}, Enabled {enabledJobs}',
  objectSetting: '{object} Setting',
  emptyObjectTip: 'No {object} yet.',
  new: 'New',
  cleanCache: 'Clean Cache',
  durationSeconds: '{duration}s',
  executionHistory: 'Execution History',
  error: 'Error',
  socket: {
    connecting: 'Connecting',
    connected: 'Online',
    closed: 'Offline',
    closing: 'Closing',
  },
  string: 'String',
  arrayItem: 'Array Item',
  integer: 'Integer',
  openEmbed: 'OpenEmbed',
  selectAll: 'Select All',
  projectToGetStart: 'Create a project to get started',
  selectTemplate:
    'Choose a template for a quick start, or create your unique project - Click to begin your personalized journey!',
  syncTip: 'Save the modified data before data synchronization',
  deployment: 'Deployment',
  deploy: 'Deploy',
  deployments: {
    name: 'Name',
    title: 'Deployment',
    deployApp: 'Deploy App',
    deployDescription: 'Create application pages that can be shared',
    visibility: 'Visibility',
    publicDescription: 'Anyone can view and copy this project',
    privateDescription: 'Only admins can view and copy this project',
    toEnablePrivateProjects: 'To enable private projects',
    launchAigne: 'Please launch your AIGNE',
    updateApp: 'Update App',
    updateAppDescription: 'This will update your app',
    currentDeployment: 'Current Deployment',
    appPage: 'App Preview',
    deploymentPage: 'Deployment Page',
    appIsUpToDate: 'Your app is up to date 🎉',
    noDeployments: 'No Deployment Agents Yet',
    info: 'Info',
    link: 'Link',
    deleteTitle: 'Delete Deployment',
    deleteDescription: 'This will delete the deployment and cannot be recovered. Please be careful.',
    deleteSuccess: 'Delete Success',
    emptyDeployment: 'No Deployment Agents Yet',
    updateSuccess: 'Update Success',
    explore: 'Explore Page',
    productHunt: 'ProductHunt',
    productHuntUrl: 'ProductHunt Link',
    productHuntBannerUrl: 'ProductHunt Banner Link',
    invalidUrl: 'Please enter a valid URL',
  },
  private: 'Private',
  category: {
    title: 'Category',
    name: 'Category Name',
    icon: 'Icon',
    create: 'Create Category',
    delete: 'Delete Category',
    edit: 'Edit Category',
    add: 'Add Category',
    iconVisit: '- Visit icon website:',
    iconTip: `\
- Use keywords to search for suitable icons
- The icon format is 'xxx:yyyy', for example: 'mdi-light:account'
`,
    noCategories: 'No Categories',
    deleteConfirm: 'Are you sure you want to delete this category?',
    deleteDescription: 'This will delete the category and cannot be recovered. Please be careful.',
  },
  updateSuccess: 'Update Success',
  success: 'Success',
  failed: 'Failed',
  makeOwnVersion: 'Make Your Own Version',
  blankTemplate: 'Blank Template',
  loginRequired: 'Login Required',
  loginRequiredHelper: 'The user needs to log in before using this agent',
  noLoginRequiredHelper: 'The user can use this agent without logging in',
  publishToStore: 'Publish to Store',
  run: 'Run',
  makeYours: 'Make Yours',
  makeYoursTip: 'Clone this AI application to create your own version',
  readme: 'Readme',
  shareOnTwitter: 'Share on Twitter',
  openInNewTab: 'Open in new tab',
  copyLink: 'Copy Link',
  noEntryAgent: 'No Entry Agent',
  noEntryAgentDescription: 'Please set one as entry agent',
  selectEntryAgentTitle: 'Select Entry Agent',
  selectEntryAgentDescription: 'Before deployment, you need to set up the entry point agent.',
  activeWhen: 'Active when',
  selectTemplateDynamicInputTip: 'Taken over automatically by Agent',
  multiTenantRestriction: {
    requestLimit: {
      desc: "You've reached your request limit. Upgrade to Premium to increase your request capacity.",
    },
    projectLimit: {
      desc: "You've reached your maximum number of projects. Upgrade to Premium to create more projects.",
    },
    customBrand: {
      desc: 'Custom branding is a Premium/Professional feature. Upgrade your plan to personalize your brand.',
    },
    cronJobs: {
      desc: 'Cron Jobs is a Professional feature. Please upgrade to the Professional plan to access this feature.',
    },
    anonymousRequest: {
      desc: 'Anonymous access control is a premium feature. Please upgrade to the Premium plan to access this feature.',
    },
  },
  premiumFeatureTip: 'Premium feature',
  pricingAndPlans: {
    buttonTooltip: 'Pricing and Plans',
    currentPlan: 'This is your current plan',
  },
  multiple: 'Multiple',
  dropdown: 'Dropdown',
  checkbox: 'Checkbox',
  imageParameterInNotUserRole: 'Image parameters can only be used in the user role',
  noPreviewImage: 'No Preview Image',
  noOutputValueSchema: 'Component lacks type definition, may render incorrectly',
  verifyVC: 'Verify VC',
  vcItem: 'VC Name',
  trustedIssuers: 'Trusted Issuers',
  buttonTitle: 'Button Title',
  buttonTitleVerified: 'Button Title (verified)',
  agentNotFound: 'Agent Not Found',
  deleteMemory: 'Delete Memory',
  deleteMemoryTip: 'The current Memory is used by the following Agent(s): {agents}, confirm deletion?',
  memoryNotDefined: 'Memory Variable Not Defined Or Changed',
  operators: {
    equals: 'Equals',
    doesNotEqual: 'Does Not Equal',
    lessThan: 'Less Than',
    greaterThan: 'Greater Than',
    lessThanOrEqual: 'Less Than Or Equal',
    greaterThanOrEqual: 'Greater Than Or Equal',
    contains: 'Contains',
    beginsWith: 'Begins With',
    endsWith: 'Ends With',
    doesNotContain: 'Does Not Contain',
    doesNotBeginWith: 'Does Not Begin With',
    doesNotEndWith: 'Does Not End With',
    isNull: 'Is Null',
    isNotNull: 'Is Not Null',
    and: 'And',
    or: 'Or',
  },
  decision: {
    AI: 'AI Condition',
    branch: 'Branch Condition',
    addRule: 'Add Rule',
    branchTip:
      'Please set Agent condition rules first. When no condition rules are selected, you can set default execution tools, otherwise no Agent will be executed',
  },
  aigneBannerVisibility: 'AIGNE branding banner visibility',
  similarity: 'Similarity',
  crawl: 'Crawl',
  createObject: 'Create {object}',
  file: 'File',
  noResults: 'No related results',
});
