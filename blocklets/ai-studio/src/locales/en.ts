import flat from 'flat';

export default flat({
  form: {
    name: 'Name',
    new: 'New',
    copy: 'Copy',
    prompt: 'Prompt',
    branch: 'Branch',
    dataset: 'Dataset',
    project: 'Project',
    add: 'Add',
    type: 'Type',
    mode: 'Mode',
    form: 'Form',
    chat: 'Chat',
    tag: 'Tag',
    model: 'Model',
    temperature: 'Temperature',
    rename: 'Rename',
    file: 'File',
    processedAt: 'Processed At',
    actions: 'Actions',
    fullSite: 'Full Site',
    fullSiteTip: 'Equivalent to selecting all the posts in the discussion',
    title: 'Title',
    author: 'Author',
    createdAt: 'Created At',
    process: 'Process',
    image: 'Image',
    next: 'Next',
    outputKey: 'Output Key',
    versionNote: 'Version Note',
    parameter: {
      type: 'Type',
      typeText: 'Text',
      typeNumber: 'Number',
      typeSelect: 'Select',
      typeLanguage: 'Language',
      placeholderTip:
        'You can use the value of this parameter to describe the purpose of your parameter to assist AI recognition, or as a prompt for input.',
      label: 'Label',
      value: 'Value',
      defaultValue: 'Default Value',
      typeTextMultiline: 'Multiline',
      placeholder: 'Placeholder',
      helper: 'Helper Text',
      required: 'Required',
      minLength: 'Min Length',
      maxLength: 'Max Length',
      min: 'Min',
      max: 'Max',
      addOption: 'Add Option',
    },
  },
  alert: {
    export: 'Export',
    import: 'Import',
    imported: 'Imported',
    noTemplates: 'No Templates',
    saveChanges: 'Your updated data has not been saved, are you sure to leave?',
    discard: 'Discard',
    discardChanges: 'Discard all changes?',
    deleteTemplate: 'Delete template "{template}"?',
    deleteTemplateContent: 'There are {references} templates referencing this template',
    exportTip: 'The following templates will be exported',
    importTip: 'The following templates will be imported',
    deleteTemplates: 'The following templates will be deleted',
    cancel: 'Cancel',
    delete: 'Delete',
    edit: 'Edit',
    ok: 'Ok',
    saved: 'Saved',
    savedButSyncConflicted: 'Saved, but sync with remote conflict!',
    deleted: 'Deleted',
    overwrittenTip: 'This template will be overwritten',
    downloadBackup: 'Download backup',
    openInAssistant: 'Open in Assistant',
    duplicate: 'Duplicate',
    unnamed: 'Unnamed',
    search: 'Search',
    noCommits: 'No Commits',
    updatedAt: 'Updated At',
    history: 'History',
    branchCreated: 'Branch created',
    onBranchTip: 'You are now in history, you need to create a branch to save your changes!',
    deleteBranch: 'Delete branch "{branch}"?',
    showAllBranches: 'Show all branches',
    close: 'Close',
    pickFromBranch: 'Pick from branch',
    saveInNewBranch: 'Save in new branch',
    newBranchRequired: 'New branch is required',
    currentBranch: 'Current branch',
    message: 'Message',
    compare: 'Version compare',
    unsave: {
      title: 'Unsaved Changes',
      content: ' Your changes have not been saved yet!',
    },
  },
  import: {
    title: 'Import Templates',
    remote: 'Import from git repo',
    remoteDescription: 'Import a project from an existing git repository, such as GitHub.',
    selectProject: 'Select Project',
    selectBranch: 'Select Branch',
    templates: 'Templates',
    selectTemplates: 'Please select the template first',
    empty: 'No template projects available for import.',
  },
  emptyToolPlaceholder: 'Add an assistant as a tool to execute, select, and other capabilities.',
  translate: 'Tool name english translate',
  functionName:
    'The name of the proactive translation assistant can be used as a template for selection. If the function name is not in English, it cannot be recognized. If it is already in English, there is no need for translation.',
  newFromTemplates: 'New from Templates',
  myProjects: 'My Projects',
  examples: 'Examples',
  duplicate: 'Duplicate',
  pin: 'Pin',
  unpin: 'Unpin',
  stopped: 'Stopped has been selected in advance',
  delete: 'Delete',
  open: 'Open',
  unnamed: 'Unnamed',
  description: 'Description',
  blank: 'Blank',
  create: 'Create',
  newObject: 'New {object}',
  newObjectWithType: 'New "{object}" {type}',
  createdAt: 'Created at',
  home: 'Home',
  prompts: 'Prompts',
  functions: 'Functions',
  function: 'Function',
  api: 'API',
  noParameters: 'No Parameters',
  logs: 'Logs',
  parameters: 'Parameters',
  model: 'Model',
  images: 'Images',
  inputParameters: 'Input parameters',
  promptMessages: 'Prompt output',
  temperature: 'temperature',
  temperatureTip:
    'Adjusting the temperature can control the diversity of generated text. A low temperature will make the generated text more consistent and predictable, while a high temperature will increase the randomness and creativity of the text.',
  topP: 'top_p',
  topPTip:
    "Adjusting top_p can control the length and diversity of the generated text. A lower top_p value narrows down the model's selection range, resulting in more coherent text, while a higher top_p value introduces more choices, increasing the diversity of the text.",
  presencePenalty: 'presence_penalty',
  presencePenaltyTip:
    'Adjusting the presence_penalty can affect the frequency of repeated topics in the generated text. A higher presence_penalty value will reduce the occurrence of repeated topics, resulting in more fresh and diverse content, while a lower presence_penalty value may lead to more repetition of topics.',
  frequencyPenalty: 'frequency_penalty',
  frequencyPenaltyTip:
    'Adjusting the frequency_penalty allows for control over the occurrence of repeated words and phrases in the generated text. A higher frequency_penalty value will reduce the likelihood of repetitions, while a lower frequency_penalty value may increase the repetition of learned phrases and words from previously generated text.',
  maxTokens: 'max_tokens',
  maxTokensTip:
    "The maximum number of tokens to generate in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
  type: 'Type',
  text: 'Text',
  image: 'Image',
  mode: 'Mode',
  formMode: 'Form',
  chatMode: 'Chat',
  clearSession: 'Clear current session history',
  showSidebar: 'Show sidebar',
  hideSidebar: 'Hide sidebar',
  folder: 'folder',
  file: 'file',
  noFiles: 'No files yet, you can click + to create a file',
  add: 'Add {object}',
  prompt: 'Prompt',
  send: 'Send',
  stop: 'Stop',
  session: 'Session',
  setting: 'Setting',
  chat: 'Chat',
  debug: 'Debug',
  save: 'Save',
  cancel: 'Cancel',
  branch: 'Branch',
  commitMessage: 'Note',
  confirm: 'Confirm',
  projectSetting: {
    homePageUrl: 'Home Page Url',
    name: 'Project name',
    description: 'Project description',
    gitType: {
      title: 'Git Version',
      simple: {
        title: 'Simple mode',
        subTitle: "Just need simple version control, or don't care about version issues.",
      },
      default: {
        title: 'Professional Mode (familiar with Git)',
        subTitle:
          'Users are familiar with the basic knowledge of Git version management and need perfect version management ability.',
      },
    },
    baseInfo: 'Basic Information',
    defaultModel: 'Default Model',
    icon: 'Select or Upload Icon',
    selectedFail: 'Please select a picture first',
  },
  notOpenFile: 'Please open the file from the file list on the left first!',
  noProjectTip: "You haven't created any projects yet. You can create one from the template above!",
  aboutTokens: 'About {tokens} tokens',
  test: 'Test',
  discuss: 'Discuss',
  variable: 'Variable',
  loading: 'Loading...',
  noData: 'No data',
  dataset: 'Dataset',
  next: 'Next',
  public: 'Public',
  nonPublic: 'Non-public',
  noPermissionSaveToBranch: 'You do not have permission to save data to branch {branch}',
  validation: {
    fieldRequired: 'Please fill out this field',
    fieldMax: 'Please enter a value less than {max}',
    fieldMin: 'Please enter a value greater than {min}',
    fieldMinLength: 'Please enter at least {minLength} characters',
    fieldMaxLength: 'Please enter fewer than {maxLength} characters',
    urlPattern: 'Please enter a valid http/https url',
  },
  dependents: 'dependents',
  addToTest: 'Add To Test',
  testCaseCount: '{count} cases',
  runAll: 'Run All',
  output: 'Output',
  debugThisCase: 'Debug this case',
  deleteThisCase: 'Delete this case',
  runThisCase: 'Run this case',
  subscribeAIService: 'Subscribe AI Service',
  diff: {
    created: 'New file',
    deleted: 'Deleted',
    modified: 'Modified',
  },
  restore: 'Revert changes',
  restoreConform: 'Are you sure you want to revert the changes in {path}?',
  label: 'Label',
  actions: 'Actions',
  copy: 'Copy',
  copied: 'Copied',
  activeMessageTip: 'Active this message',
  hideMessageTip: 'Hide this message',
  dragSort: 'Drag sort',
  sourceBranch: 'Source branch',
  noVariables: "You haven't added any variables yet",
  compare: {
    origin: 'Origin Data',
    current: 'Current Data',
    select: 'Select Commit',
    empty: 'Empty Data',
    diff: 'The file content is modified',
  },
  startTime: 'Start Time',
  endTime: 'End Time',
  duration: 'Duration',
  confirmDelete: 'Please input {name} to delete',
  deleteProject: 'This will permanently delete project with name {name}',
  selectObject: 'Select {object}',
  template: 'Template',
  call: {
    prompt: {
      select: 'Select Template',
    },
    api: {
      placeholder: 'API ',
      body: 'Body (JSON)',
    },
    func: {
      code: 'Code',
    },
    dataset: {
      search: 'Search',
    },
    list: {
      prompt: 'Execute Prompt',
      api: 'Execute API',
      func: 'Execute JS Function',
      dataset: 'Query Dataset',
      macro: 'Reference Macro',
    },
  },
  remoteGitRepo: 'Remote Git Repo',
  deleteRemote: 'Unlink remote git repo',
  deleteRemoteTip: 'Are you sure you want to unlink the remote git repo?',
  deleteSucceed: 'Delete Succeed',
  url: 'URL',
  username: 'Username',
  projectName: 'Project Name',
  accessToken: 'Access Token',
  remoteGitRepoPasswordHelper: 'Github does not support password access, you can use',
  githubTokenTip:
    'Steps to get github access token:\n1. Click link navigate to github tokens\n2. Click "Generate new token"\n3. Fill the token name\n4. Repository access: Only select repositories\n5. Select your repository\n6. Repositories permissions: Contents -> Read and write\n7. Generate token',
  autoSync: 'Auto sync when saving',
  sync: 'Sync',
  synced: 'Synced',
  syncedAt: 'Synced at',
  mergeConflict: 'Merge Conflict',
  mergeConflictTip: 'The remote data has been changed and cannot be automatically merged!',
  useRemote: 'Use Remote',
  useRemoteTip: 'Use <b>remote</b> data to overwrite <b>local</b> data',
  useLocal: 'Use Locale',
  useLocalTip: 'Use <b>local</b> data to overwrite <b>remote</b> data',
  templates: '{count} Prompts',
  validateTools: {
    parameter: {
      name: {
        base: '"name" must be a string',
        empty: '"name" cannot be empty',
        required: '"name" is a required field',
        exit: '"name" already exists',
      },
      description: {
        base: '"description" must be a string',
        empty: '"description" cannot be empty',
        required: '"description" is a required field',
      },
      type: {
        base: 'Type must be a string',
        only: 'Type must be "object"',
        required: 'Type is a required field',
      },
      properties: {
        base: 'Properties must be an object',
        required: 'Properties is a required field',
      },
      required: {
        base: 'Required must be an array of strings',
      },
    },
    prompt: {
      id: {
        base: 'Id must be a string',
        empty: 'Id cannot be empty',
        required: 'Id is a required field',
      },
      templateId: {
        base: 'Template ID must be a string',
        required: 'Template ID is a required field',
      },
      templateName: {
        base: 'Template name must be a string',
      },
      template: {
        base: 'Template must be an object',
        required: 'Template is a required field',
      },
      parameters: {
        base: 'Parameters must be an object',
      },
    },
    api: {
      id: {
        base: 'Id must be a string',
        empty: 'Id cannot be empty',
        required: 'Id is a required field',
      },
      method: {
        base: 'Method must be a string',
        empty: 'Method cannot be empty',
        required: 'Method is a required field',
      },
      url: {
        base: 'URL must be a string',
        uri: 'URL must be a valid URI',
        required: 'URL is a required field',
      },
    },
    func: {
      id: {
        base: 'Id must be a string',
        empty: 'Id cannot be empty',
        required: 'Id is a required field',
      },
      code: {
        base: 'Code must be a string',
        empty: 'Code cannot be empty',
        required: 'Code is a required field',
      },
    },
  },
  explorer: 'Explorer',
  branches: {
    one: '1 Branch',
    more: '{counts} Branches',
  },
  addObject: 'Add {object}',
  formatPrompt: 'Format Prompt',
  promptPlaceholder: 'Please enter your prompt',
  promptMessage: 'Prompt Message',
  executeBlock: 'Execute Block',
  executeBlockName: 'Execute Block Name',
  callAPI: 'Call API',
  formatResult: 'Format Result',
  stayAsIs: 'Stay as is',
  asHistory: 'As Chat History',
  chatSubscribe: 'Hello, in order to continue chatting, please first subscribe to AI-KIT service',
  prepareExecutes: 'Prepare Executes',
  tool: 'Tool',
  callFunction: 'Call Function',
  callPrompt: 'Call Prompt',
  method: 'Method',
  parameter: 'Parameter',
  value: 'Value',
  haveNotAddedTip: "You haven't added any {object} blocks yet",
  selectTool: 'Select Tool',
  emptyInput: 'The input cannot be empty',
  emptyPrompts: 'Add at least one prompt',
  userInput: 'Test Parameters',
  all: 'All',
  allTools: 'Execute All tools',
  selectPrompt: 'Select and execute one of tools',
  nonExistentVariable: 'The "{data}" variable does not exist',
  addVariable: 'Add Variable',
  number: 'Number',
  numberTip: 'The number of images to generate. Must be between 1 and 10. For dall-e-3, only n=1 is supported.',
  quality: 'Quality',
  qualityTip:
    'The quality of the image that will be generated. hd creates images with finer details and greater consistency across the image. This param is only supported for dall-e-3.',
  responseFormat: 'Response Format',
  responseFormatTip: 'The format in which the generated images are returned. Must be one of url or b64_json.',
  size: 'Size',
  sizeTip:
    'The size of the generated images. Must be one of 256x256, 512x512, or 1024x1024 for dall-e-2. Must be one of 1024x1024, 1792x1024, or 1024x1792 for dall-e-3 models.',
  style: 'Style',
  styleTip:
    'The style of the generated images. Must be one of vivid or natural. Vivid causes the model to lean towards generating hyper-real and dramatic images. Natural causes the model to produce more natural, less hyper-real looking images. This param is only supported for dall-e-3.',
  parametersTip:
    'Parameters can be inputted normally, or you can use the {{variable}} syntax to pass variables. If no parameters are provided, variables will be seamlessly passed through',
  selectByPromptParameterPlaceholder: 'Parameters without value will be provided by AI based on the prompt.',
  asTemplateProject: 'As Template Project',
  cancelTemplateProject: 'Cancel Template Project',
  asExampleProject: 'As Example Project',
  cancelExampleProject: 'Cancel Example Project',
  execute: 'Execute',
});
