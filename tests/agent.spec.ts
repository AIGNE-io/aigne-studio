import { expect, test } from '@playwright/test';

import { add } from '../packages/co-git/src';

test.beforeEach('route to agent page', async ({ page }) => {
  await page.goto('/projects');

  // check examples projects
  const examples = page.getByTestId('projects-examples');
  await examples.waitFor();
  await expect(examples).not.toBeEmpty();

  // copy a example project
  await examples.getByText('AI Chat').click({ force: true });
  await page.waitForURL(/\/projects\/\w+/, { waitUntil: 'networkidle' });
  await page.waitForSelector('[data-testid=project-page-prompts]');
});

test('agent name and description', async ({ page }) => {
  const title = page.getByTestId('basic-info-form-agent-name').locator('input');
  await title.click();
  await title.fill('E2E Test');
  await title.press('Enter');

  const description = page.getByTestId('basic-info-form-agent-description').locator('textarea').first();
  await description.click();
  await description.fill('this is generated by e2e');
  await title.press('Enter');
});

test('add/delete/edit input', async ({ page }) => {
  // add/delete input
  await page.waitForSelector('[data-testid=input-settings]', { state: 'visible' });
  const inputSettings = page.getByTestId('input-settings');

  await inputSettings.getByRole('button', { name: 'Input', exact: true }).click();
  await page.getByRole('menuitem', { name: 'Custom input' }).click();
  const newLine = inputSettings.getByRole('row', { name: 'User input Text', exact: true });

  const nameCol = newLine.getByPlaceholder('Name of Input');
  await nameCol.click();
  await nameCol.fill('e2eTest');

  const lines = await inputSettings.getByRole('row', { name: 'e2eTest' }).all();
  for (let i = lines.length - 1; i >= 0; i--) {
    await lines[i]?.getByRole('button').click();
    await page.getByRole('menuitem', { name: 'Delete' }).click();
    await page.waitForTimeout(500);
  }
  const newLines = await inputSettings.getByRole('row', { name: 'e2eTest' }).all();
  expect(newLines.length).toBe(0);
});

test('add/delete another agent', async ({ page }) => {
  await page.getByTestId('input-settings').getByRole('button', { name: 'Input' }).click();
  await page.getByText('Custom input').click();
  await page.getByText('User input').last().click();
  await page.getByRole('menuitem', { name: 'Another Agent' }).click();
  await page.getByRole('combobox').click();
  await page.getByText('App', { exact: true }).click();
  await page.getByRole('button', { name: 'Ok' }).click();
  await expect(page.getByTestId('input-settings').locator('tbody')).toContainText('Agent Outputs');

  const anotherAgents = await page.getByTestId('input-table-row').filter({ hasText: 'Agent Outputs' }).all();
  for (let i = anotherAgents.length - 1; i >= 0; i--) {
    await anotherAgents[i]?.getByRole('button').click();
    await page.getByRole('menuitem', { name: 'Delete' }).click();
  }

  await expect(await page.getByTestId('input-settings').getByRole('row', { name: 'Agent Outputs' })).not.toBeVisible();
});

test.describe.serial('create memory as input', () => {
  test('create memory', async ({ page }) => {
    await page.getByTestId('project-page-variables').click();
    await page.waitForSelector('[data-testid=variable-list]', { state: 'visible' });
    // 判断是否已经存在 memory
    let addMemory = await page.getByTestId('variable-list').getByRole('button', { name: 'Memory' });
    if (!addMemory) {
      addMemory = await page.getByTestId('add-new-memory');
    }
    expect(addMemory).toBeVisible();

    await addMemory.click();
    await page.locator('input[name="key"]').click();
    await page.locator('input[name="key"]').fill('e2eTest');
    await page.locator('input[name="defaultValue"]').click();
    await page.locator('input[name="defaultValue"]').fill('e2eTest');

    if (await page.getByText('Data already exist.').isVisible()) {
      await page.getByRole('button', { name: 'Cancel' }).click();
    } else {
      await page.getByRole('button', { name: 'Save' }).click();
    }
    await page.waitForTimeout(500);
    expect(await page.getByTestId('variable-list').getByText('e2eTest')).toBeVisible();
  });

  test('add/delete memory as input', async ({ page }) => {
    await page.getByTestId('project-page-prompts').click();
    await page.waitForSelector('[data-testid=input-settings]', { state: 'visible' });
    await page.getByTestId('input-settings').getByRole('button', { name: 'Input' }).click();
    await page.getByText('Custom input').click();
    await page.getByText('User input').last().click();
    await page.getByRole('menu').getByText('Memory').click();
    await page.getByPlaceholder('Select a memory').click();
    await page.getByRole('option', { name: 'e2eTest' }).first().click();
    await page.getByRole('button', { name: 'Ok' }).click();

    await expect(await page.getByTestId('input-settings').getByText('Memory').count()).toBeGreaterThan(0);

    const anotherAgents = await page.getByTestId('input-table-row').filter({ hasText: 'Memory' }).all();
    for (let i = anotherAgents.length - 1; i >= 0; i--) {
      await anotherAgents[i]?.getByRole('button').click();
      await page.getByRole('menuitem', { name: 'Delete' }).click();
    }
    await expect(await page.getByTestId('input-settings').getByText('Memory').count()).toBe(0);
  });
});

test.describe.serial('create knowledge as input', () => {
  test('create knowledge', async ({ page }) => {
    await page.getByTestId('project-page-knowledge').click();
    await page.getByText('Add Knowledge').click();
    await page.getByPlaceholder('Give your knowledge a name (e').click();
    await page.getByPlaceholder('Give your knowledge a name (e').fill('e2eTest');
    await page.locator('textarea[name="description"]').click();
    await page.locator('textarea[name="description"]').fill('e2eTest');

    const responsePromise = page.waitForResponse(/\/api\/datasets/);
    await page.getByRole('button', { name: 'Create' }).click();
    await responsePromise;

    expect(await page.getByRole('button', { name: 'Add Document' }).first()).toBeVisible();
  });

  test('add knowledge as input', async ({ page }) => {
    await page.getByTestId('project-page-prompts').click();
    await page.waitForSelector('[data-testid=input-settings]', { state: 'visible' });
    await page.getByTestId('input-settings').getByRole('button', { name: 'Input' }).click();
    await page.getByText('Custom input').click();
    await page.getByText('User input').last().click();
    await page.getByRole('menu').getByText('Knowledge').click();
    await page.getByPlaceholder('Select a knowledge to query').click();
    await page.getByRole('option', { name: 'e2eTest' }).first().click();
    await page.getByRole('button', { name: 'Ok' }).click();

    expect(
      page.getByTestId('input-settings').getByRole('cell', { name: 'message' }).getByPlaceholder('Name of Input')
    ).toBeVisible();

    const anotherAgents = await page.getByTestId('input-table-row').filter({ hasText: 'Knowledge' }).all();
    for (let i = anotherAgents.length - 1; i >= 0; i--) {
      await anotherAgents[i]?.getByRole('button').click();
      await page.getByRole('menuitem', { name: 'Delete' }).click();
    }
    await expect(await page.getByTestId('input-settings').getByText('Knowledge').count()).toBe(0);
  });
});

test('set model', async ({ page }) => {
  await page.getByTestId('OpenAIIcon').locator('rect').click();
  await page.waitForSelector('[data-testid=prompt-setting-model]');

  await page.getByTestId('prompt-setting-model').click();
  await page.getByRole('option', { name: 'GPT4', exact: true }).click();
  expect(await page.getByTestId('prompt-setting-model')).toHaveText('GPT4');

  await page.getByTestId('prompt-setting-temperature').getByRole('textbox').click();
  await page.getByTestId('prompt-setting-temperature').getByRole('textbox').fill('2');
  await page.getByTestId('prompt-setting-temperature').getByRole('textbox').press('Enter');
  await page.waitForSelector('[data-testid=prompt-setting-temperature]');
  expect(page.getByTestId('prompt-setting-temperature').getByRole('textbox')).toHaveValue('2');

  await page.getByTestId('prompt-setting-topP').getByRole('textbox').click();
  await page.getByTestId('prompt-setting-topP').getByRole('textbox').fill('0');
  await page.getByTestId('prompt-setting-topP').getByRole('textbox').press('Enter');
  await page.waitForSelector('[data-testid=prompt-setting-topP]');
  expect(page.getByTestId('prompt-setting-topP').getByRole('textbox')).toHaveValue('0');

  await page.getByTestId('prompt-setting-frequencyPenalty').getByRole('textbox').click();
  await page.getByTestId('prompt-setting-frequencyPenalty').getByRole('textbox').fill('2');
  await page.getByTestId('prompt-setting-frequencyPenalty').getByRole('textbox').press('Enter');
  await page.waitForSelector('[data-testid=prompt-setting-frequencyPenalty]');
  expect(page.getByTestId('prompt-setting-frequencyPenalty').getByRole('textbox')).toHaveValue('2');

  await page.getByTestId('prompt-setting-presencePenalty').getByRole('textbox').click();
  await page.getByTestId('prompt-setting-presencePenalty').getByRole('textbox').fill('2');
  await page.getByTestId('prompt-setting-presencePenalty').getByRole('textbox').press('Enter');
  await page.waitForSelector('[data-testid=prompt-setting-presencePenalty]');
  expect(page.getByTestId('prompt-setting-presencePenalty').getByRole('textbox')).toHaveValue('2');

  await page.getByTestId('prompt-setting-maxTokens').getByRole('textbox').click();
  await page.getByTestId('prompt-setting-maxTokens').getByRole('textbox').fill('8192');
  await page.getByTestId('prompt-setting-maxTokens').getByRole('textbox').press('Enter');
  await page.waitForSelector('[data-testid=prompt-setting-maxTokens]');
  expect(page.getByTestId('prompt-setting-maxTokens').getByRole('textbox')).toHaveValue('8192');
});

test('prompt message', async ({ page }) => {
  await page.waitForSelector('[data-testid=agent-processing-view]', { state: 'visible' });
  const originCount = await page.getByTestId('prompt-item').count();
  await page.getByRole('button', { name: 'Prompt Message' }).click();
  await page.waitForSelector('[data-testid=prompt-item]');
  expect(await page.getByTestId('prompt-item').count()).toBe(originCount + 1);

  await page.getByTestId('agent-processing-view').getByRole('paragraph').nth(2).click();
  await page.getByTestId('agent-processing-view').getByRole('textbox').nth(2).fill('hello');

  // 删除多余prompt-item
  const promptItems = await page.getByTestId('prompt-item').all();

  for (let i = promptItems.length - 1; i > 1; i--) {
    await promptItems[i]?.hover();
    await promptItems[i]?.getByRole('button').nth(3).click({ force: true });
    await page.waitForSelector('[data-testid=prompt-item]');
  }

  expect(await page.getByTestId('prompt-item').count()).toBeLessThan(originCount);
});

test('agent output', async ({ page }) => {
  await page.waitForSelector('[data-testid=output-variable-row]', { state: 'visible' });

  const count = await page.getByTestId('output-variable-row').count();
  await page.getByTestId('add-output-variable-button').click();
  await page.getByTestId('add-output-variable-button-custom-output').click();
  await page.waitForSelector('[data-testid=output-name-cell]', { state: 'visible' });
  expect(await page.getByTestId('output-variable-row').count()).toBe(count + 1);

  const customOutputLine = await page
    .getByTestId('output-variable-row')
    .filter({ has: page.locator(`input[value="customOutput"]`) })
    .first();
  const nameCell = page.getByTestId('output-name-cell').first().getByPlaceholder('Output name');
  await nameCell.click();
  await nameCell.fill('customOutput');

  const descriptionCell = customOutputLine.getByPlaceholder('Prompt to LLM how to fill');
  await descriptionCell.click();
  await descriptionCell.fill('this is e2e test');
  expect(await descriptionCell).toHaveValue('this is e2e test');

  const formatCell = customOutputLine.getByLabel('Text');
  await formatCell.click();
  await page.getByRole('option', { name: 'Text' }).click();
  expect(await formatCell).toBeVisible();

  const requiredCell = customOutputLine.getByRole('checkbox');
  await requiredCell.check();
  expect(await requiredCell).toBeChecked();
  await requiredCell.uncheck();
  expect(await requiredCell).not.toBeChecked();

  await customOutputLine.getByRole('button').click();
  await page.getByTestId('output-actions-cell-setting').click();
  const dialog = await page.getByTestId('output-actions-cell-dialog');
  const titleItem = dialog.getByPlaceholder('The title displayed above');
  await titleItem.click();
  await titleItem.fill('e2eTest');
  await titleItem.press('Enter');
  await dialog.getByRole('combobox').click();
  await page.getByRole('option', { name: 'Markdown View' }).click();
  await page.getByRole('button', { name: 'Ok' }).click();
  expect(await customOutputLine.getByText('Markdown View')).toBeVisible();

  const customLines = page
    .getByTestId('output-variable-row')
    .filter({
      has: page.locator(`input[value="customOutput"]`).or(page.locator('input[placeholder="Output name"][value=""]')),
    })
    .all();

  for (let customLine of await customLines) {
    await customLine.getByRole('button').click();
    await page.getByTestId('output-actions-cell-delete').click();
  }
});

test('agent debug', async ({ page }) => {
  const input = page.locator("[data-testid='debug-mode-parameter'] input");

  await input.click();
  await input.fill('hello');

  const list = page.locator("[data-testid='virtuoso-item-list']>div");
  const count = await list.count();
  const responsePromise = page.waitForResponse(
    (response) => response.url().includes('/ai/call') && response.status() === 200
  );
  await page.getByRole('button', { name: 'Execute' }).click();
  await responsePromise;

  const newCount = await list.count();
  await expect(newCount).toBe(count + 2);
  await expect(await list.last()).toContainText('AI Chat');
  await expect(await list.last()).toContainText('Get history messages');
});

test('session', async ({ page }) => {
  // clear session
  await page.getByLabel('Clear current session history').click();
  const list = page.locator("[data-testid='virtuoso-item-list']>div");
  const count = await list.count();
  await expect(count).toBe(0);

  // session session
  await page.getByTestId('session-select').click();
  const sessionItems = page.getByTestId('session-select-item');
  const originCount = await sessionItems.count();
  await page.getByRole('option', { name: 'New Session' }).click();
  await page.getByTestId('session-select').click();
  const newCount = await sessionItems.count();
  await expect(newCount).toBe(originCount + 1);

  // delete session
  await page.getByTestId('session-select').click({ force: true });
  await page.waitForSelector('[data-testid=session-delete-button]', { state: 'visible' });
  await page.getByLabel('Delete current session').click();
  await page.getByTestId('session-select').click();
  await expect(await sessionItems.count()).toBe(originCount);
});
