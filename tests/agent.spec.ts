import { expect, test } from '@playwright/test';
// test('edit agent name and description', async ({ page }) => {
//   await page.goto('/projects');

//   // check examples projects
//   const examples = page.getByTestId('projects-examples');
//   await examples.waitFor();
//   await expect(examples).not.toBeEmpty();

//   // copy a example project
//   await examples.getByText('Email Generator').click();
//   await page.waitForURL(/\/projects\/\w+/, { waitUntil: 'networkidle' });
//   await page.waitForSelector('[data-testid=project-page-prompts]');

//   await page.getByPlaceholder('Unnamed').click();
//   await page.getByPlaceholder('Unnamed').fill('App Renamed');
//   await page.getByPlaceholder('Unnamed').press('Enter');

//   await page.getByPlaceholder("Introduce the agent's").click();
//   await page.getByPlaceholder("Introduce the agent's").fill('this is generated by e2e');
// });

// test('add/delete input', async ({ page }) => {
//   await page.goto('/projects');

//   // check examples projects
//   const examples = page.getByTestId('projects-examples');
//   await examples.waitFor();
//   await expect(examples).not.toBeEmpty();

//   // copy a example project
//   await examples.getByText('Email Generator').click();
//   await page.waitForURL(/\/projects\/\w+/, { waitUntil: 'networkidle' });
//   await page.waitForSelector('[data-testid=project-page-prompts]');

//   // add/delete input
//   await page.getByRole('button', { name: 'Input', exact: true }).click();
//   await page.getByText('Conversation History').click();
//   await page.getByRole('row', { name: 'chatHistory Conversation' }).getByRole('button').click();
//   await page.getByRole('menuitem', { name: 'Delete' }).click();

//   // edit input name
//   await page.getByRole('button', { name: 'Input', exact: true }).click();
//   await page.getByText('Custom input').click();
//   await page
//     .getByRole('row', { name: 'User input Text', exact: true })
//     .getByPlaceholder('Name of Input')
//     .fill('e2eTest');
//   await page.getByRole('row', { name: 'e2eTest User input Text' }).first().getByRole('button').click();
//   await page.getByPlaceholder('Name of Input (e.g. subject,').click();
//   await page.getByPlaceholder('Name of Input (e.g. subject,').fill('e2eTest');
//   await page.getByPlaceholder('Describe to the user how to').click();
//   await page.getByPlaceholder('Describe to the user how to').fill('this is e2e placeholder');
//   await page.getByRole('textbox', { name: 'this is e2e placeholder' }).click();
//   await page.getByRole('textbox', { name: 'this is e2e placeholder' }).fill('this is e2e placeholder');
//   await page
//     .locator('div')
//     .filter({ hasText: /^Min Length$/ })
//     .getByRole('textbox')
//     .click();
//   await page
//     .locator('div')
//     .filter({ hasText: /^Min Length$/ })
//     .getByRole('textbox')
//     .fill('0');
//   await page
//     .locator('div')
//     .filter({ hasText: /^Max Length$/ })
//     .getByRole('textbox')
//     .click();
//   await page
//     .locator('div')
//     .filter({ hasText: /^Max Length$/ })
//     .getByRole('textbox')
//     .fill('100');
//   await page.getByLabel('Is this input required').check();
//   await page.getByRole('button', { name: 'Ok' }).click();

//   await page.getByRole('row', { name: 'question User input Text' }).getByRole('button').click();
//   await page.getByRole('menuitem', { name: 'Delete' }).click();

//   // user input
// });

test.beforeEach('route to agent page', async ({ page }) => {
  await page.goto('/projects');

  // check examples projects
  const examples = page.getByTestId('projects-examples');
  await examples.waitFor();
  await expect(examples).not.toBeEmpty();

  // copy a example project
  await examples.getByText('AI Chat').click({ force: true });
  await page.waitForURL(/\/projects\/\w+/, { waitUntil: 'networkidle' });
  await page.waitForSelector('[data-testid=project-page-prompts]');
});

test('set model', async ({ page }) => {
  await page.getByTestId('OpenAIIcon').locator('rect').click();
  await page.waitForSelector('[data-testid=prompt-setting-model]');

  await page.getByTestId('prompt-setting-model').click();
  await page.getByRole('option', { name: 'GPT4', exact: true }).click();
  expect(await page.getByTestId('prompt-setting-model')).toHaveText('GPT4');

  await page.getByTestId('prompt-setting-temperature').getByRole('textbox').click();
  await page.getByTestId('prompt-setting-temperature').getByRole('textbox').fill('2');
  await page.getByTestId('prompt-setting-temperature').getByRole('textbox').press('Enter');
  await page.waitForSelector('[data-testid=prompt-setting-temperature]');
  expect(page.getByTestId('prompt-setting-temperature').getByRole('textbox')).toHaveValue('2');

  await page.getByTestId('prompt-setting-topP').getByRole('textbox').click();
  await page.getByTestId('prompt-setting-topP').getByRole('textbox').fill('0');
  await page.getByTestId('prompt-setting-topP').getByRole('textbox').press('Enter');
  await page.waitForSelector('[data-testid=prompt-setting-topP]');
  expect(page.getByTestId('prompt-setting-topP').getByRole('textbox')).toHaveValue('0');

  await page.getByTestId('prompt-setting-frequencyPenalty').getByRole('textbox').click();
  await page.getByTestId('prompt-setting-frequencyPenalty').getByRole('textbox').fill('2');
  await page.getByTestId('prompt-setting-frequencyPenalty').getByRole('textbox').press('Enter');
  await page.waitForSelector('[data-testid=prompt-setting-frequencyPenalty]');
  expect(page.getByTestId('prompt-setting-frequencyPenalty').getByRole('textbox')).toHaveValue('2');

  await page.getByTestId('prompt-setting-presencePenalty').getByRole('textbox').click();
  await page.getByTestId('prompt-setting-presencePenalty').getByRole('textbox').fill('2');
  await page.getByTestId('prompt-setting-presencePenalty').getByRole('textbox').press('Enter');
  await page.waitForSelector('[data-testid=prompt-setting-presencePenalty]');
  expect(page.getByTestId('prompt-setting-presencePenalty').getByRole('textbox')).toHaveValue('2');

  await page.getByTestId('prompt-setting-maxTokens').getByRole('textbox').click();
  await page.getByTestId('prompt-setting-maxTokens').getByRole('textbox').fill('8192');
  await page.getByTestId('prompt-setting-maxTokens').getByRole('textbox').press('Enter');
  await page.waitForSelector('[data-testid=prompt-setting-maxTokens]');
  expect(page.getByTestId('prompt-setting-maxTokens').getByRole('textbox')).toHaveValue('8192');
});

test('prompt message', async ({ page }) => {
  await page.waitForSelector('[data-testid=agent-processing-view]', { state: 'visible' });
  const originCount = await page.getByTestId('prompt-item').count();
  await page.getByRole('button', { name: 'Prompt Message' }).click();
  await page.waitForSelector('[data-testid=prompt-item]');
  expect(await page.getByTestId('prompt-item').count()).toBe(originCount + 1);

  await page.getByTestId('agent-processing-view').getByRole('paragraph').nth(2).click();
  await page.getByTestId('agent-processing-view').getByRole('textbox').nth(2).fill('hello');

  // 删除多余prompt-item
  const promptItems = await page.getByTestId('prompt-item').all();

  for (let i = promptItems.length - 1; i > 1; i--) {
    await promptItems[i]?.hover();
    await promptItems[i]?.getByRole('button').nth(3).click({ force: true });
    await page.waitForSelector('[data-testid=prompt-item]');
  }

  expect(await page.getByTestId('prompt-item').count()).toBeLessThan(originCount);
});

test('agent output', async ({ page }) => {
  await page.waitForSelector('[data-testid=output-variable-row]', { state: 'visible' });

  const count = await page.getByTestId('output-variable-row').count();
  await page.getByTestId('add-output-variable-button').click();
  await page.getByTestId('add-output-variable-button-custom-output').click();
  await page.waitForSelector('[data-testid=output-name-cell]', { state: 'visible' });
  expect(await page.getByTestId('output-variable-row').count()).toBe(count + 1);

  const customOutputLine = await page
    .getByTestId('output-variable-row')
    .filter({ has: page.locator(`input[value="customOutput"]`) })
    .first();
  const nameCell = page.getByTestId('output-name-cell').first().getByPlaceholder('Output name');
  await nameCell.click();
  await nameCell.fill('customOutput');

  const descriptionCell = customOutputLine.getByPlaceholder('Prompt to LLM how to fill');
  await descriptionCell.click();
  await descriptionCell.fill('this is e2e test');
  expect(await descriptionCell).toHaveValue('this is e2e test');

  const formatCell = customOutputLine.getByLabel('Text');
  await formatCell.click();
  await page.getByRole('option', { name: 'Text' }).click();
  expect(await formatCell).toBeVisible();

  const requiredCell = customOutputLine.getByRole('checkbox');
  await requiredCell.check();
  expect(await requiredCell).toBeChecked();
  await requiredCell.uncheck();
  expect(await requiredCell).not.toBeChecked();

  await customOutputLine.getByRole('button').click();
  await page.getByTestId('output-actions-cell-setting').click();
  const dialog = await page.getByTestId('output-actions-cell-dialog');
  const titleItem = dialog.getByPlaceholder('The title displayed above');
  await titleItem.click();
  await titleItem.fill('e2eTest');
  await titleItem.press('Enter');
  await dialog.getByRole('combobox').click();
  await page.getByRole('option', { name: 'Markdown View' }).click();
  await page.getByRole('button', { name: 'Ok' }).click();
  expect(await customOutputLine.getByText('Markdown View')).toBeVisible();

  const customLines = page
    .getByTestId('output-variable-row')
    .filter({
      has: page.locator(`input[value="customOutput"]`).or(page.locator('input[placeholder="Output name"][value=""]')),
    })
    .all();

  for (let customLine of await customLines) {
    await customLine.getByRole('button').click();
    await page.getByTestId('output-actions-cell-delete').click();
  }
});
