import { expect, test } from '@playwright/test';
// test('edit agent name and description', async ({ page }) => {
//   await page.goto('/projects');

//   // check examples projects
//   const examples = page.getByTestId('projects-examples');
//   await examples.waitFor();
//   await expect(examples).not.toBeEmpty();

//   // copy a example project
//   await examples.getByText('Email Generator').click();
//   await page.waitForURL(/\/projects\/\w+/, { waitUntil: 'networkidle' });
//   await page.waitForSelector('[data-testid=project-page-prompts]');

//   await page.getByPlaceholder('Unnamed').click();
//   await page.getByPlaceholder('Unnamed').fill('App Renamed');
//   await page.getByPlaceholder('Unnamed').press('Enter');

//   await page.getByPlaceholder("Introduce the agent's").click();
//   await page.getByPlaceholder("Introduce the agent's").fill('this is generated by e2e');
// });

// test('add/delete input', async ({ page }) => {
//   await page.goto('/projects');

//   // check examples projects
//   const examples = page.getByTestId('projects-examples');
//   await examples.waitFor();
//   await expect(examples).not.toBeEmpty();

//   // copy a example project
//   await examples.getByText('Email Generator').click();
//   await page.waitForURL(/\/projects\/\w+/, { waitUntil: 'networkidle' });
//   await page.waitForSelector('[data-testid=project-page-prompts]');

//   // add/delete input
//   await page.getByRole('button', { name: 'Input', exact: true }).click();
//   await page.getByText('Conversation History').click();
//   await page.getByRole('row', { name: 'chatHistory Conversation' }).getByRole('button').click();
//   await page.getByRole('menuitem', { name: 'Delete' }).click();

//   // edit input name
//   await page.getByRole('button', { name: 'Input', exact: true }).click();
//   await page.getByText('Custom input').click();
//   await page
//     .getByRole('row', { name: 'User input Text', exact: true })
//     .getByPlaceholder('Name of Input')
//     .fill('e2eTest');
//   await page.getByRole('row', { name: 'e2eTest User input Text' }).first().getByRole('button').click();
//   await page.getByPlaceholder('Name of Input (e.g. subject,').click();
//   await page.getByPlaceholder('Name of Input (e.g. subject,').fill('e2eTest');
//   await page.getByPlaceholder('Describe to the user how to').click();
//   await page.getByPlaceholder('Describe to the user how to').fill('this is e2e placeholder');
//   await page.getByRole('textbox', { name: 'this is e2e placeholder' }).click();
//   await page.getByRole('textbox', { name: 'this is e2e placeholder' }).fill('this is e2e placeholder');
//   await page
//     .locator('div')
//     .filter({ hasText: /^Min Length$/ })
//     .getByRole('textbox')
//     .click();
//   await page
//     .locator('div')
//     .filter({ hasText: /^Min Length$/ })
//     .getByRole('textbox')
//     .fill('0');
//   await page
//     .locator('div')
//     .filter({ hasText: /^Max Length$/ })
//     .getByRole('textbox')
//     .click();
//   await page
//     .locator('div')
//     .filter({ hasText: /^Max Length$/ })
//     .getByRole('textbox')
//     .fill('100');
//   await page.getByLabel('Is this input required').check();
//   await page.getByRole('button', { name: 'Ok' }).click();

//   await page.getByRole('row', { name: 'question User input Text' }).getByRole('button').click();
//   await page.getByRole('menuitem', { name: 'Delete' }).click();

//   // user input
// });

test.beforeEach('route to agent page', async ({ page }) => {
  await page.goto('/projects');

  // check examples projects
  const examples = page.getByTestId('projects-examples');
  await examples.waitFor();
  await expect(examples).not.toBeEmpty();

  // copy a example project
  await examples.getByText('AI Chat').click({ force: true });
  await page.waitForURL(/\/projects\/\w+/, { waitUntil: 'networkidle' });
  await page.waitForSelector('[data-testid=project-page-prompts]');
});

test('change model parameters', async ({ page }) => {
  await page.locator('.MuiStack-root > iconify-icon > svg > path').first().click();
  await page.getByLabel('GPT3.5 turbo 16k').click();
  await page.getByRole('option', { name: 'GPT4o' }).click();
  await page.locator('.MuiSlider-thumb').first().click();
  await page.locator('.MuiSlider-thumb').first().click();
  await page.locator('.MuiSlider-thumb').first().click();
  await page.locator('.MuiSlider-thumb').first().click();
  await page.getByRole('textbox').first().fill('1.35');
  await page
    .locator('div:nth-child(4) > div:nth-child(2) > .MuiBox-root > .MuiStack-root > .MuiSlider-root > .MuiSlider-track')
    .click();
  await page
    .locator('div:nth-child(7) > div:nth-child(2) > .MuiBox-root > .MuiStack-root > .MuiSlider-root > .MuiSlider-rail')
    .click();
});

test('test', async ({ page }) => {
  console.log('test');
  console.log('test 222');
  console.log('hahahah');
});
