import { expect, test } from '@playwright/test';

import { createProject } from '../../utils/project';

let projectUrl: string;

test.beforeAll('clean and create project', async ({ browser }) => {
  const page = await browser.newPage();
  await createProject({ page });
  projectUrl = page.url();
});

test.beforeEach(async ({ page }) => {
  await page.goto(projectUrl);
  await page.waitForLoadState('networkidle');

  await page.getByTestId('new-agent-button').click();
  await page.getByTestId('file-tree').click();
});

test('agent name and description', async ({ page }) => {
  const title = page.getByTestId('agent-name').locator('input');
  await title.click();
  await title.fill('E2E Test');
  await title.press('Enter');
  expect(await title.getAttribute('value')).toBe('E2E Test');

  const description = page.getByTestId('agent-description').locator('textarea').first();
  await description.click();
  await description.fill('this is generated by e2e');
  await title.press('Enter');
  await expect(page.getByTestId('agent-description')).toContainText('this is generated by e2e');
});

test('add/delete/edit input', async ({ page }) => {
  await page.getByTestId('agent-name').locator('input[placeholder="Unnamed"]').waitFor();
  const inputTable = page.getByTestId('input-settings');
  const rows = page.getByTestId('input-table').locator('.input-table-row');
  const count = await rows.count();
  await inputTable.getByRole('button', { name: 'Input', exact: true }).click();
  await page.getByRole('menuitem', { name: 'Custom input' }).click();
  await page.locator('.input-table-row').last().locator('input[placeholder="Name of Input"]').waitFor();
  expect(await rows.count()).toBe(count + 1);

  const newLine = rows.last();
  const nameCol = newLine.getByPlaceholder('Name of Input');
  await nameCol.click();
  await nameCol.fill('e2eTest');
  await expect(nameCol).toHaveValue('e2eTest');

  let length = await rows.count();
  while (length > 0) {
    const line = rows.first();
    await line.locator('td').last().getByRole('button').last().click();
    await page.getByRole('menuitem', { name: 'Delete' }).click();
    length = await rows.count();
  }
  expect(await rows.count()).toBe(0);
});

test('another agent', async ({ page }) => {
  const title = page.getByTestId('agent-name').locator('input');
  await title.click();
  await title.fill('Test Agent');
  await title.press('Enter');
  expect(await title.getAttribute('value')).toBe('Test Agent');

  await page.getByTestId('new-agent-button').click();
  const newTitle = page.getByTestId('agent-name').locator('input');
  await newTitle.fill('Another Agent');
  await newTitle.press('Enter');

  const rows = page.getByTestId('input-table').locator('.input-table-row');
  const newLine = rows.last();
  await newLine.locator('td').nth(1).locator('button').click();
  await page.getByTestId('tool-from-source').click();
  await page.getByTestId('agent-select-input').click();
  await page.getByRole('listbox').getByText('Test Agent').first().click();
  await page.getByRole('button', { name: 'Ok' }).click();
  await expect(newLine).toContainText('Call Test Agent');
});

test('memory', async ({ page }) => {
  await page.getByTestId('project-page-variables').click();
  await page.waitForSelector('[data-testid=variable-list]', { state: 'visible' });
  // 判断是否已经存在 memory
  let addMemory = page.getByTestId('variable-list').getByRole('button', { name: 'Memory' });
  if (!addMemory) {
    addMemory = page.getByTestId('add-new-memory');
  }
  await addMemory.click();
  await page.locator('input[name="key"]').fill('e2eTest');
  await page.locator('input[name="defaultValue"]').fill('e2eTest');

  if (await page.getByText('Data already exist.').isVisible()) {
    await page.getByRole('button', { name: 'Cancel' }).click();
  } else {
    await page.getByRole('button', { name: 'Save' }).click();
  }
  await expect(page.getByTestId('variable-list').getByText('e2eTest')).toBeVisible();

  await page.getByTestId('project-page-prompts').click();
  await page.getByLabel('New Agent').getByRole('button').click({ force: true });
  const rows = page.getByTestId('input-table').locator('.input-table-row');
  const newLine = rows.last();
  await newLine.locator('td').nth(1).locator('button').click();
  await page.getByTestId('datastore-from-source').click();
  await page.getByTestId('select-memory-input').click();
  await page.getByRole('listbox').getByText('e2eTest').click();
  await page.getByRole('button', { name: 'Ok' }).click();

  await expect(newLine).toContainText('Memory');
});

test('create knowledge', async ({ page }) => {
  await page.getByTestId('project-page-knowledge').click();
  await page.getByText('Create Knowledge').click();

  await expect(page.getByText('Import Knowledge')).toBeVisible();
});

test('set model', async ({ page }) => {
  const model = page.getByTestId('model-select-lite-trigger');
  await model.click();
  await page.getByTestId('model-select-lite-options').getByTestId('gpt-4').click();

  await page.getByTestId('model-settings-menu-button').click();
  const temperature = page.getByTestId('agent-model-settings-temperature');
  await temperature.locator('input').last().fill('1.1');

  const topP = page.getByTestId('agent-model-settings-topP');
  await topP.locator('input').last().fill('0');

  const frequencyPenalty = page.getByTestId('agent-model-settings-frequencyPenalty');
  await frequencyPenalty.locator('input').last().fill('2');

  const presencePenalty = page.getByTestId('agent-model-settings-presencePenalty');
  await presencePenalty.locator('input').last().fill('2');

  await expect(temperature.locator('input').last()).toHaveValue('1.1');
  await expect(topP.locator('input').last().last()).toHaveValue('0');
  await expect(frequencyPenalty.locator('input').last()).toHaveValue('2');
  await expect(presencePenalty.locator('input').last()).toHaveValue('2');
});

test('prompt message', async ({ page }) => {
  const prompts = page.locator('.prompt-item');
  await page.getByRole('button', { name: 'Prompt Message' }).click();
  expect(await prompts.count()).toBe(2);

  await prompts.last().getByRole('textbox').fill('e2e test');
  await expect(prompts.last().locator(':text("e2e test")')).toBeVisible();
});

test('agent output', async ({ page }) => {
  await page.getByTestId('add-output-variable-button').click();
  await page.getByTestId('add-output-variable-button-custom-output').click();

  const customOutputLine = page.locator('.output-variable-row').last();
  const nameCell = customOutputLine.getByPlaceholder('Output name');
  await nameCell.fill('customOutput');

  const descriptionCell = customOutputLine.getByPlaceholder('Prompt to LLM how to fill');
  await descriptionCell.fill('this is e2e test');

  const formatCell = customOutputLine.locator('td').nth(3);
  await formatCell.click();
  await page.getByRole('option', { name: 'Text' }).click();

  const requiredCell = customOutputLine.getByRole('checkbox');
  await requiredCell.check();

  await expect(nameCell).toHaveValue('customOutput');
  await expect(descriptionCell).toHaveValue('this is e2e test');
  await expect(formatCell).toHaveText('Text');
  await expect(requiredCell).toBeChecked();
});

test('agent debug', async ({ page }) => {
  await page.locator('button').filter({ hasText: 'Debug' }).click();
  const input = page.locator("[data-testid='debug-mode-parameter'] textarea").first();
  await input.fill('hello');
  const list = page.locator("[data-testid='virtuoso-item-list']>div");

  await page.route(/\/api\/ai\/call/, (route) => {
    route.fulfill({ status: 200, contentType: 'text/event-stream', path: 'tests/agent-debug.txt' });
  });

  await page.getByRole('button', { name: 'Execute' }).click();

  await expect(list.last()).toContainText('Hello! How can I assist you today?', { timeout: 30000 });

  await page.getByLabel('Clear current session history').click();
  await expect(page.locator("[data-testid='virtuoso-item-list']>div")).toHaveCount(0);

  await page.getByTestId('session-select').click();
  await page.getByRole('option', { name: 'New Session' }).click();

  await page.getByTestId('session-delete-button').click({ force: true });
  await page.getByTestId('session-select').click();
  await expect(page.getByTestId('session-select-item')).toHaveCount(1);
});

test('debug tests', async ({ page }) => {
  await page.locator('button').filter({ hasText: 'Debug' }).click();
  const input = page.locator("[data-testid='debug-mode-parameter'] textarea").first();
  await input.fill('hello');
  await page.getByRole('button', { name: 'Save as test case' }).click();

  const firstCase = page.locator('.test-case').first();
  await firstCase.getByTestId('run-test').first().click();

  await page.route(/\/api\/ai\/call/, (route) => {
    route.fulfill({ status: 200, contentType: 'text/event-stream', path: 'tests/agent-debug.txt' });
  });
  expect(firstCase).toContainText('hello');
});

test('collaboration', async ({ page }) => {
  await page.getByTestId('debug-view-collaboration').click();
  await page.locator('.be-editable.notranslate').fill('this is e2e test');
  const responsePromise = page.waitForResponse(/\/api\/comments/);
  await page.getByRole('button', { name: 'Comment' }).click();
  await responsePromise;

  expect(await page.locator('.comment-list').locator('>div').count()).toBe(1);
});
